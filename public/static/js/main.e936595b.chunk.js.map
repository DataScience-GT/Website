{"version":3,"sources":["serviceWorker.js","components/Firebase/entity.ts","components/Session/context.js","components/Firebase/context.js","config/config.js","components/Firebase/user.ts","components/Firebase/file.ts","components/Firebase/groups.ts","components/Firebase/event.ts","components/Firebase/firebase.js","components/Firebase/index.js","components/Session/withAuthentication.js","components/Navigation/Navigation.js","config/routes.js","components/Home Page/Contact.js","components/Home Page/HomePage.js","components/Signup Page/SignUpPage.js","components/Login Page/LoginPage.js","components/Dashboard/Member Dashboard/Dashboard Navbar/DashboardNavbar.js","components/Dashboard/Member Dashboard/User Welcome Header/UserWelcomeHeader.js","components/Dashboard/Member Dashboard/Event List/Event Type Badge/EventTypeBadge.js","components/Dashboard/Member Dashboard/Event List/Event XP Badge/EventXPBadge.js","components/Dashboard/Member Dashboard/Event List/Event Edit Form/EventEditForm.js","components/Dashboard/Member Dashboard/Event List/Event Card/EventCard.js","components/Dashboard/Member Dashboard/Event List/EventList.js","components/Dashboard/Member Dashboard/XP Card/XP Acquisition Table/XPAcquisitionHistoryTable.js","components/Dashboard/Member Dashboard/XP Card/XPCard.js","components/Dashboard/Common/Home Page/DashboardHomePage.js","components/Dashboard/Dashboard.js","components/Dashboard/Common/Event Page/DashboardEventPage.js","components/Dashboard/Member Dashboard/Dashboard Alert/DashboardAlert.js","components/Dashboard/Common/Edit Profile Page/DashboardEditProfilePage.js","components/Dashboard/Common/Group Page/DashboardGroupPage.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","MembershipStatus","EventType","AuthUserContext","React","createContext","FirebaseContext","withFirebase","Component","props","react_default","a","createElement","Consumer","firebase","Object","assign","SUBSCRIBE","FACEBOOK","LINKEDIN","EMAIL_URL","UserApi","firebaseApp","classCallCheck","this","db","auth","_fbapp","functions","app","setPersistence","Auth","Persistence","SESSION","current_user_uid","currentUser","Error","uid","group","collection","doc","get","user_setting","data","membership_status","entity","pending","suspended","exists","first_name","last_name","id","where","then","snapshot","empty","docs","length","catch","err","console","log","email","password","signInWithEmailAndPassword","signOut","alt_email","major","year","phone_number","slice","createUserWithEmailAndPassword","res","user","gt_email","slack_id","XP","resume_uri","event_history","workshop","project","gm","other","xp_history","profile_pic","interests","groups","qr_code","creation_ts","Date","verified_ts","short_title","verification_uri","set","delete","userRef","update","file","uploadResume","name","firestore","FieldValue","increment","event","xp","eventType","eventId","eventXP","arrayUnion","fname","uploadVerification","ref","getDownloadURL","download_url","get_current_uid","amount","to","concat","String","check_perms","perm1","perm2","query","user_docs","map","status","isCash","target_membership_status","active_semester","active_year","httpsCallable","is_cash","context","res1","call_cloud_disable_function","res2","current_user_id","promises","forEach","element","push","_this","p1","p2","reason","curr_uid","get_user","curr_user","response","comp_promise","arrayRemove","_this2","userUpdate","FileApi","storage","rootref","metadata","child","put","uploadFile","GroupApi","get_groups_and_members","mapped","documents","individualRemovalPromise","members","memberDocRef","EventApi","desc","date","type","owner","link","newEventRef","links","rsvp_list","delete_event","eventRef","xpAdded","_ref","asyncToGenerator","regenerator_default","mark","_callee9","wrap","_context9","prev","next","sent","merge","stop","_x18","apply","arguments","userName","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","isLocalHost","initializeApp","withAuthentication","_React$Component","possibleConstructorReturn","getPrototypeOf","call","state","authUser","inherits","createClass","key","value","listener","onAuthStateChanged","setState","Session_context","Provider","LoginComponent","SignOut","bind","assertThisInitialized","preventDefault","signout","history","Nav_default","Link","href","onClick","SignupComponent","contextType","AuthLoginComponent","withRouter","AuthSignUpComponent","Navigation","isLoggedin","className","Navbar_default","sticky","expand","Brand","react_router_dom","src","alt","Toggle","aria-controls","Collapse","ROUTES","Button","variant","ContactLink","children","Section","Container","Row","Col","heading","subheading","Hero","sm","size","About","HomePage_Section","md","Join","Contact","Fragment","CONSTANTS","Contact_ContactLink","target","MeetingContent","slidesURL","notebookURL","materialsURL","Meetings","Table","striped","bordered","hover","HomePage_MeetingContent","HomePage","HomePage_Hero","HomePage_About","HomePage_Meetings","HomePage_Join","HomePage_Contact","SignUpForm","verification","verification_method","vs_amount","vs_person","handleInputChange","handleFileChange","handleSubmit","checked","defineProperty","files","createUser","updateUserVerificationCash","updateUserVerificationVenmo","alert","_context","t0","method","Form","Group","Label","Control","onChange","accept","onSubmit","placeholder","controlId","as","Check","inline","label","getVerificationStub","SignUpWithFirebase","compose","SignUpPage","LoginForm","email_addr","stay_signed_in","sign_in","code","Text","LoginWithFirebase","LoginPage","DashboardNavbar","isExec","populateUser","includes","collapseOnSelect","UserWelcomeHeader","descriptor","EventTypeBadge","mapTypeToBadgeVariant","mapTypeToBadgeText","Badge","pill","EventXPBadge","EventEditForm","username","show","isEventOwnerContext","defaultValue","selected","disabled","handleDelete","EventCard","handleClose","handleShow","handleClick","_callee","_ref2","_callee2","_context2","update_event","document","reload","_x","_x2","_x3","_x4","_x5","_x6","_ref3","_callee3","_context3","_x7","handleRSVP","modalTitle","isRSVP","modalBody","EventEditForm_EventEditForm","eventLinks","Card","Body","EventTypeBadge_EventTypeBadge","EventXPBadge_EventXPBadge","Modal","onHide","Header","closeButton","Title","Footer","EventList","isLoading","events","get_events","yesterdaysDate","setDate","getDate","sort","b","eventItems","EventCard_EventCard","Spinner_default","animation","XPAcquisitonHistoryTable","retrieveUserXPHistory","item","get_event","newXPHistory","xpHistory","eventData","hostName","xpAcquired","XPCard","XPAcquisitionHistoryTable_XPAcquisitonHistoryTable","DashboardHomePage","UserWelcomeHeader_UserWelcomeHeader","xs","XPCard_XPCard","EventList_EventList","Dashboard","current_tab","cached_user_id","getCurrentUser","_this3","Firebase_context","Dashboard_UnverifiedComponent","DashboardNavbar_DashboardNavbar","click","DashboardHomePage_DashboardHomePage","UnverifiedComponent","_this4","DashboardWithFirebase","DashboardPage","CreateEventForm","viewEvents","create_event","InputGroup","Prepend","EditEventForm","_React$Component2","getEventId","eventName","i","currrentEvent","selectedEventId","populateEvents","_populateEvents","_callee4","_context4","setTimeout","DashboardEventContainer","_React$Component4","DashboardEventPage_CreateEventForm","DashboardEventPage_EditEventForm","DashboardEventPageWithFirebase","DashboardEventPage","DashboardAlert","Alert_default","Heading","close","DashboardEditProfileContainer","handleFileInputChange","resume","handleAlertClose","showAlert","update_user","update_user_resume","userData","populate_events","_populate_events","_callee5","_context5","DashboardAlert_DashboardAlert","Badge_default","split","DashboardEditProfilePageWithFirebase","DashboardEditProfilePage","CreateGroupForm","create_group","DeleteGroupForm","groups_available","setup_groups_available","_setup_groups_available","get_groups","available_groups","delete_group","ListGroup","Item","CreateJoinRequestForm","_React$Component3","populateUsers","users","get_all_users","selectedUserId","handleSelectedOptionsChange","_this5","_handleInputChange","_handleSelectedOptionsChange","selectedIndex","getAttribute","addUserToGroup","data-key","rows","VerifyPendingUserForm","_this6","pending_users","handleStatusChange","update_pending_users_state","_update_pending_users_state","ret","getPendingUsers","update_users","verifyUserPayment","req","_this7","render_verification_stub","toString","DashboardGroupContainer","_React$Component5","DashboardGroupPage_CreateGroupForm","DashboardGroupPage_DeleteGroupForm","DashboardGroupPage_CreateJoinRequestForm","DashboardGroupPage_VerifyPendingUserForm","DashboardGroupContainerWithFirebase","DashboardGroupPage","components_Navigation_Navigation","react_router","exact","path","component","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e936595b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Contains all models: entities as interfaces, and enums where necessary. \n * \n * Wherever a URI is needed, it follows the following scheme: \n *  \n * URIs can be one of tho things: a URL or a app-specific URI. If it is a app-specific URI, we will prepend `::` to the identifier. Otherwise, a URL is assumed. \n * There is a simple scheme to the app-specific URIs: \n *  ```(user|event)/(id)/(subfolder, if any)/filename``` \n * The only current subfolder is \"resumes\" for user resumes. \n * We can host everything in some cloud bucket. \n */\n\n/**\n * Contains the membership statuses. Current options: \n *   - `pending` Has submitted form, but we have yet to verify dues payment \n *   - `active_semester` Form submitted, and all dues are for a semester \n *   - `active_year` Form submitted, all dues are paid for a year  \n *   - `suspended` Taking a break for the semester/left the club \n *   - `unpaid` Returning members who have yet to pay dues \n */\nexport enum MembershipStatus {\n    pending, \n    active_semester, \n    active_year, \n    suspended, \n}\n\n/**\n * General Group reference. For linking between entities. \n *  - `name`: name of group \n */\nexport interface Group {\n    name: string, \n}\n\n/**\n * Primary User Interface. Contains: \n * \n * `uid` Auto-generated UID. Acts as a global PK. \n * \n * `first_name` User's preferred first name \n * \n * `last_name` User's preferred last name \n * \n * `gt_email` User's Georgia Tech email. Acts as a PK, and prevents duplicate account creation. \n *\n * `alt_email` User's preferred alternate email, if any. \n * \n * `major` User's major at Gatech\n * \n * `year` User's current year at Gatech\n * \n * `industry pref 1` primary industry preference\n *\n * `industry pref 2` secondary industry preference\n * \n * `industry pref 3` tertia industry preference\n *  \n * `phone_number` User's preferred contact phone number. \n * \n * `slack_id` User's ID on slack, for integration purposes \n * \n * `XP` An integer value of the user's experience points, calculated by whatever formula we use. \n * \n * `resume_uri` A URI for the Resume. Allows one preferred resume. More explanation for URI scheme below. \n * \n * `event_history` Array of event histories, split up by name.  This includes: \n *  - `workshops` The user's history of attended workshops \n *  - `project_meetings` The user's history of project meetings \n *  - `other_events` All other events (including special events) \n * \n * `groups` The list of user's group memberships. Groups act as our primary permission control mechanism. See [[UserGroup]]. \n * \n * `qr_code` Reference to the member's QR code. More details in URI section; encodes user's ID \n * \n * `creation_ts` Account creation date (when they submit the membership form) \n * \n * `verified_ts` date of latest verification \n * \n * `membership_status` Status of membership, due to the different stages a single user might be at. See [[MembershipStatus]]\n * \n * `short_title` A short description of what they do in the club (for leadership)\n */\nexport interface User {\n    uid: number|string, \n    first_name: string, \n    last_name: string, \n    gt_email: string, \n    alt_email: string, \n    major: string,\n    year: string\n    phone_number: string, \n    slack_id: string, \n    XP: number, \n    resume_uri: string, \n    event_history: {\n        workshop: Array<number>, \n        project: Array<number>, \n        gm: Array<number>\n        other: Array<number>\n    },\n    xp_history: Array<Object>,\n    interests: Array<string>, \n    profile_pic: string,\n    groups: Array<Group>, \n    qr_code: string, \n    creation_ts: number, \n    verified_ts: number, \n    membership_status: MembershipStatus, \n    short_title: string, \n    verification_uri: string //Will be \"cash\" if cash \n}\n\n/**\n * Each type of event we may have. \n */\nexport enum EventType {\n    workshop, \n    project, \n    gm,\n    other\n}\n\n/**\n * Generic type to support counting attendance. \n */\nexport interface Attendance {\n    uid: number, \n    ts: number\n}\n\n/**\n * Special things required for a workshop event. \n */\nexport interface WorkshopEvent {\n    ppt_uri: string, \n    ipynb: string\n}\n\n/**\n * Special things that represent a sponsor. \n */\nexport interface Sponsor {\n    name: string, \n    logo: string, \n    blurb: string\n}\n\n/**\n * Special things that are required for a sponsored event. \n */\nexport interface OtherEvent {\n    sponsors: Array<Sponsor>, \n    logo: string\n}\n\n/**\n * Special things required for a group meeting. \n */\nexport interface GMEvent {\n    slides: string\n}\n\n/** \n * Our generic Event interface. Includes: \n * \n * `eid`: the event's ID. \n * `name`: Name for the event. \n * `date`: Date in standard UTC format. \n * `creation_ts`: when the event was actually created \n * `event_type`: See [[EventType]]\n * `attendance`: List of attendees. See [[Attendance]]. \n * `short_desc`: one-liner preview for the event. \n * `long_desc`: longer blurb for the event \n * `misc_files`: any special resources that can't be categorized. Optional.\n * `workshop`: Info for a workshop event. See [[WorkshopEvent]]. Optional.\n * `other`: Info for a special event. See [[OtherEvent]]. Optional\n * `gm`: Info for a general meeting. See [[GMEvent]]. Optional\n */\nexport interface Event {\n    eid: number, \n    name: string,\n    date: string,\n    creation_ts: number  \n    event_type: EventType, \n    attendance: Array<Attendance>, \n    short_desc: string, \n    long_desc: string, \n    misc_files?: Array<String>, \n    workshop?: WorkshopEvent, \n    other?: OtherEvent, \n    gm?: GMEvent\n}\n\n/**\n * Provides a cross-index for our groups. \n * `name`: Identical to the name in [[Group.name]]\n * `group`: the \"PK\" for this group. See [[Group]] \n * `members`: A list of members and when they joined. See [[Attendance]]\n */\nexport interface UserGroup {\n    name: string,\n    group: Group, \n    members: Array<Attendance>\n}\n","import React from 'react'; \n\nconst AuthUserContext = React.createContext(null); \n\nexport default AuthUserContext; \n","/**\n * According to the tutorial I was following, this should allow us to pass \n * a firebase context to each component, eliminating the need for \n * multiple firebase instances and creating a singleton (which simplifies\n * login context.)\n */\nimport React from 'react'; \n\nconst FirebaseContext = React.createContext(null); \n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer> \n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n)\n\nexport default FirebaseContext; \n","/**\n * @author Raj Shrimali and Vidhur Kumar\n */\nexport const DUES_SEMESTER = 15\nexport const DUES_YEAR = 20 \nexport const SUBSCRIBE = \"http://eepurl.com/geswlv\"; \nexport const FACEBOOK = \"https://www.facebook.com/datasciencegt/\"; \nexport const LINKEDIN = \"https://www.linkedin.com/company/dsgt/\"; \nexport const EMAIL_RAW = \"datasciencegt@gmail.com\"\nexport const EMAIL_URL = \"mailto:\" + EMAIL_RAW; \n\nexport const MAJORS = [['Business Administration', 'Computational Media', 'Computer Science', 'Architecture', 'Industrial Design', \n'Music Technology', 'Aerospace Engineering', 'Biomedical Engineering', 'Chemical and Biomolecular Engineering', 'Civil Engineering', \n'Computer Engineering', 'Electrical Engineering', 'Environmental Engineering','Industrial Engineering', 'Materials Science and Engineering', \n'Mechanical Engineering', 'Nuclear and Radiological Engineering', 'Applied Language and Intercultural Studies', 'Computational Media & Digital Media', \n'Computational Media', 'Economics', 'Economics and International Affairs', 'Global Economics and Modern Languages', 'History, Technology, and Society', \n'International Affairs', 'International Affairs and Modern Languages', 'Literature, Media, and Communication & Digital Media', \n'Literature, Media, and Communication', 'Public Policy', 'Applied Physics', 'Biochemistry', 'Biology', 'Chemistry', \n'Earth and Atmospheric Sciences', 'Mathematics', 'Neuroscience', 'Physics', 'Psychology']];\n","/**\n * Web User API for Firebase \n * Following Singleton model as expected from a tutorial online\n * Instantiate with a firebase app instance - will use that \n */\nimport Firebase from \"./firebase\"; \nimport * as entity from \"./entity\"; \nimport {firestore, auth, functions} from \"firebase/app\";\n\nimport {DUES_SEMESTER, DUES_YEAR} from \"../../config/config\";\n/**\n * Provides the entirety of the User API Functionality  \n */\nclass UserApi {\n    db: firebase.firestore.Firestore;  \n    auth: firebase.auth.Auth;\n    _fbapp: Firebase;\n    functions: firebase.functions.Functions;\n    constructor(firebaseApp: Firebase) {\n        this._fbapp = firebaseApp; \n        this.db = firebaseApp.db; \n        this.auth = firebaseApp.app.auth(); \n        this.auth.setPersistence(auth.Auth.Persistence.SESSION);\n        this.functions = this._fbapp.app.functions(); \n    }\n\n    /**\n     * Gets the UID of the user who is currently authenticated \n     */\n    get_current_uid() {\n        let current_user_uid = this.auth.currentUser; \n        if (current_user_uid === null) {\n            throw new Error(\"must be signed in\"); \n        }\n        return current_user_uid.uid; \n    }\n\n    /**\n     * Sees if `uid` is a member of `group`, and if `uid` is active. \n     * If the user is `pending` or `suspended` automatically returns `false`. \n     * Else, if the user is indeed part of a group, then it returns `true`.\n     * @param uid The user ID we're checking \n     * @param group The group to check \n     */\n    async check_perms(uid: string, group: string): Promise<boolean> {\n        // check pending first \n        let user_setting = ((await this.db.collection('users').doc(uid).get()).data() as entity.User).membership_status; \n        if (user_setting === entity.MembershipStatus.pending || \n            user_setting === entity.MembershipStatus.suspended) {\n            return false; \n        } else {\n            let snapshot = await this.db.collection('usergroups').doc(group).collection('members').doc(uid).get()\n            if (snapshot.exists) {\n                return true; \n            } \n            return false; \n        }\n    }\n\n    /**\n     * Returns the data file for a specific user. \n     * @param uid The user ID to request \n     */\n    async get_user(uid:string) {\n        let doc = await this.db.collection(\"users\").doc(uid).get(); \n        return await doc.data(); \n    }\n\n    async get_user_from_name(first_name: string, last_name: string) {\n        let id = null;\n        await this.db.collection('users')\n            .where('first_name', '==', first_name)\n            .where('last_name', '==', last_name)\n            .get()\n            .then(snapshot => {\n                if(snapshot.empty) {\n                    return null;\n                }\n\n                if(snapshot.docs.length > 1) {\n                    throw new Error(\"More than one user found with the same first name and the last name\");\n                }\n\n                id = snapshot.docs[0].id;\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n\n            return id;\n    }\n    \n    /**\n     * Performs a sign-in procedure and returns the result of the promise \n     * @param email The sign-up email\n     * @param password The password \n     */\n    async sign_in(email:string, password:string) {\n        return await this.auth.signInWithEmailAndPassword(email, password); \n    }\n\n    signout() {\n        // sign out the user \n        return this.auth.signOut(); \n    }\n\n    /**\n     * Creates a user by first signing up with firebase, and upon success, \n     * creating a [[entity.User]] entry in our database at the /users endpoint. \n     * @param email GT Email\n     * @param password password\n     * @param first_name First Name\n     * @param last_name Last Name\n     * @param alt_email Alternative Email (i.e. Gmail, etc)\n     * @param phone_number Phone number \n     */\n    async createUser(email: string, password: string, \n        first_name: string, \n        last_name: string, \n        alt_email: string, \n        major: string,\n        year: string,\n        phone_number: string) {\n        //create firebase user \n        //check string \n        if (email.slice(-11) !== '@gatech.edu') {\n            throw new Error(\"Email validation failed\"); \n        }\n\n        let res: firebase.auth.UserCredential; \n        // TODO: Check proper errors on create user.\n        try {\n            res = await this.auth.createUserWithEmailAndPassword(email, password); \n        } catch {\n            throw new Error(\"Email Address is already in Use\"); \n        }\n        // build it in database \n        if (res.user === null) {\n            return null; \n        }\n        try {\n            let user:entity.User = {\n                uid: res.user.uid, \n                first_name: first_name,\n                last_name: last_name,\n                gt_email: email,\n                alt_email: alt_email, \n                major: major,\n                year: year,\n                phone_number: phone_number, \n                slack_id: \"\", \n                XP: 0, \n                resume_uri: \"\", \n                event_history: {\n                    workshop: [], \n                    project: [], \n                    gm: [], \n                    other: []\n                },\n                xp_history: [],\n                profile_pic: \"\", \n                interests: [],\n                groups: [],\n                qr_code: \"\",\n                creation_ts: +new Date(), \n                verified_ts: -1, \n                membership_status: entity.MembershipStatus.pending, \n                short_title: \"\", \n                verification_uri: \"\"\n            }; \n            // Upload to db. \n            await this.db.collection('users').doc(res.user.uid).set(user); \n        } catch {\n            // upon error - delete firebase user \n            res.user.delete(); \n            throw new Error(\"User Creation failed. Please try again, or contact datasciencegt@gmail.com for assistance.\");\n        } finally {\n            return null;\n        }\n    }\n\n    async update_user(uid: string, gt_email: string, first_name: string, last_name: string, alt_email: string, major: string, year: string, phone_number: string) {\n        let userRef = await this.db.collection('users').doc(uid);\n        return userRef.update({\n                gt_email: gt_email,\n                first_name: first_name,\n                last_name: last_name,\n                alt_email: alt_email,\n                major: major,\n                year: year,\n                phone_number: phone_number\n            }).then(() => {\n                console.log('Successfully updated user');\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n\n    /**\n     * Updates the user resume and the resume URI.\n     * @param uid \n     * @param file \n     */\n    async update_user_resume(uid: string, file: File) {\n\n        let userRef = await this.db.collection('users').doc(uid);\n\n        let resume_uri;\n        userRef.get().then(snapshot => {\n            if(snapshot.exists) {\n                let data = snapshot.data();\n                // resume_uri = data['resume_uri'];\n            } else {\n\n            }\n        })\n\n        await this._fbapp.file.uploadResume(file, file.name);\n    }\n\n    async update_user_XP(uid: string, XP: number) {\n        let userRef = await this.db.collection('users').doc(uid);\n        return userRef.update({\n            XP: firestore.FieldValue.increment(XP)\n        });\n    }\n\n    async update_user_event_history(uid: string, event: string, xp: number, eventType: string) {\n        // let userRef = await this.db.collection('users').doc(uid);\n        // let eventArray = \"\";\n        // switch(eventType) {\n        //     case \"Workshop\":\n        //         eventArray = \"workshop\";\n        //         break;\n\n        //     case \"General Meeting\":\n        //         eventArray = \"gm\";\n        //         break;\n\n        //     case \"Project\":\n        //         eventArray = \"project\";\n        //         break;\n\n        //     case \"Special\":\n        //         eventArray = \"other\";\n        //         break;\n\n        //     default:\n        //         eventArray = \"\";\n        // }\n\n        // eventArray = \"event_history.\" + eventArray;\n\n        // return userRef.update({\n        //     eventArray: firestore.FieldValue.arrayUnion({event: event, xp: xp})\n        // })\n    }\n\n    /**\n     * Retrieves all users from the 'users' collection.\n     */\n    async get_all_users() {\n        return await this.db.collection('users').get();\n    }\n\n  \n\n    async add_eventXP_to_user(uid: string, eventId: string, eventXP: number) {\n        let userRef = await this.db.collection('users').doc(uid);\n        userRef.update({\n            XP: firestore.FieldValue.increment(eventXP),\n            xp_history: firestore.FieldValue.arrayUnion({id: eventId, xp: eventXP}),\n        });\n\n        // let userRef = await this.db.collection('users').doc(uid);\n\n    }\n    \n    /**\n     * Updates a user's verification status upon venmo payment. \n     * \n     * @param file The file/blob to upload. Required if option is venmo.\n     * @param fname The name of the file. \n     */\n    async updateUserVerificationVenmo(file: File, fname?: string) {\n        if (!file) {\n            throw Error(\"You MUST upload a screenshot if opting for venmo\"); \n        }\n        const snapshot = await this._fbapp.file.uploadVerification(file, file.name);\n        const download_url = (await snapshot.ref.getDownloadURL()) as string;  \n        return this.db.collection('users').doc(this.get_current_uid()).update({\"verification_uri\": download_url});\n    }\n\n    /**\n     * Allows a user to opt for a cash payment. \n     * \n     * @param amount The amount that was transferred\n     * @param to The person who received the transaction. They will need to manually provide verification. \n     */\n    async updateUserVerificationCash(amount: number, to: string) {\n        if (!amount) {\n            throw Error(\"You must include the amount you paid\"); \n        } \n        if (!to) {\n            throw Error(\"You must include who you paid to\"); \n        }\n        return this.db.collection('users').doc(this.get_current_uid()).update({\"verification_uri\": \"cash,\".concat(String(amount), \",\", to)});\n    }\n\n    /**\n     * Provides a list of users who are still pending to an authenticated Finance or \n     * Membership user. \n     */\n    async getPendingUsers(): Promise<entity.User[] | undefined> {\n        // only let membership & finance access this \n        let perm1 = await this.check_perms(this.get_current_uid(), \"finance\"); \n        let perm2 = await this.check_perms(this.get_current_uid(), \"membership\"); \n        if (perm1 || perm2) {\n            let query = await this.db.collection('users').where(\"membership_status\", \"==\", entity.MembershipStatus.pending).get(); \n            let user_docs:entity.User[] = query.docs.map(data => {\n                return data.data() as entity.User; \n            });  \n            return user_docs; \n        } \n    }\n    /**\n     * Verify user's payment status. Only allows people within Finance to do this action. \n     * @param user The string UID \n     * @param status: Whether or not to verify. \n     *   0. Mark as suspended \n     *   1. Mark as active-semester \n     *   2. Mark as active-year \n     */\n    async verifyUserPayment(user: string, status: string, isCash: boolean) {\n        // verify whether or not user has paid \n        /**\n         * 0. Only proceed if context.auth.uid is in the Finance usergroup \n         * 1. Get user document from Firestore \n         * 2. If status = 0: Mark as suspended \n         * 3. If status = 1: mark as active-semester \n         * 4. If status = 2: mark as active-year \n         * 5. Someone's fucking with us. \n         */\n        let current_user_uid = this.get_current_uid(); \n        // check the database for current user in \n        let snapshot:firebase.firestore.DocumentSnapshot; \n        try {\n            snapshot = await this.db.collection('usergroups').doc('finance').collection('members').doc(current_user_uid).get()\n            if (snapshot.exists) {\n                let amount: number; \n                let target_membership_status: entity.MembershipStatus; \n                if (status === \"0\") {\n                    target_membership_status = entity.MembershipStatus.suspended; \n                    amount = 0; \n                } else if (status === \"1\") {\n                    target_membership_status = entity.MembershipStatus.active_semester; \n                    amount = DUES_SEMESTER; \n                } else if (status === \"2\") {\n                    target_membership_status = entity.MembershipStatus.active_year; \n                    amount = DUES_YEAR; \n                } else {\n                    throw new Error(\"Incorrect status\")\n                }\n                /**\n                 * IMPORTANT: USE onUserVerify for all prod purposes. \n                 * Use onUserVerifyDummy for all dev purposes. \n                 * \n                 * Currently the funciton returns nothing of importance; \n                 * so, the dummy returns a \"success\" and the data it was passed. \n                 * \n                 */\n                this.functions.httpsCallable(\"onUserVerify\")({\n                    uid: user, \n                    amount: amount, \n                    is_cash: isCash\n                }).then(console.log)\n                return this.db.collection('users').doc(user).update({\n                    membership_status: target_membership_status, \n                    verified_ts: +new Date()\n                }) \n            }\n        } \n        finally {\n        // nothing to do  \n        }   \n    }\n\n    /**\n     * Calls a cloud fundtion (to be made) that can has \n     * elevated permissions to disable a user account. This is only done \n     * All checks are done on the server-side for security; firebase handles\n     * all authentication context transfer. \n     * @param user The uid for the user to disable\n     */\n    private call_cloud_disable_function(user:string) {\n        // TODO: Create a cloud function to disable user\n        // Placeholder until we actually get around to making one of these\n        // This will live in a cloud function obviously. \n    }\n    /**\n     * \n     * @param user The User ID generated via firebase\n     * @param context The current authentication context. \n     */\n    async suspendUser(user: string, context:any) {\n        /**\n         * 0. Only proceed if context.auth.uid in Membership \n         * 1. Get user document \n         * 2. Mark as suspended \n         * 3. Disable account on Firebase.\n         */\n        let current_user_uid = this.get_current_uid(); \n        let snapshot = await this.db.collection('usergroups').doc('membership').collection('members').doc(current_user_uid).get()\n        if (snapshot.exists) {\n            try {\n                let res1 = this.call_cloud_disable_function(user); \n                let res2 = this.db.collection('users').doc(user).update({\n                    membership_status: entity.MembershipStatus.suspended\n                })\n                await res1; \n                await res2; \n            } finally {\n                // nothing to do finally. \n            }\n        }\n    }\n    /**\n     * \n     * @param user The UID of selected user \n     * @param groups An array of group names to add the user to. Get list ov \n     * available groups through [[Groups.get_groups]]\n     */\n    async addUserToGroups(user: string, groups: Array<string>) {\n        // first get permission from membership - maybe there should be a group owner eventually \n        let current_user_id = this.get_current_uid(); \n        let snapshot = await this.db.collection('usergroups').doc('membership').collection('members').doc(current_user_id).get()\n        if (snapshot.exists) {\n            // add it to the user doc \n            // convert groups to array format \n            let promises: Promise<void>[] = []; \n            groups.forEach(element => {\n                // update it in the correct group doc \n                // we don't /need/ to wait for completion. \n                promises.push(this.db.collection('usergroups').doc(element).collection(\"members\").doc(user).set({})); \n            });\n            await this.db.collection('users').doc(user).update({groups: firestore.FieldValue.arrayUnion(groups)});\n            //wait for completion \n            await promises; \n            return true; \n        }\n        return false; \n    }\n\n    async addUserToGroup(uid: string, group: string) {\n        // update the user's doc \n        let p1 = this.db.collection('users').doc(uid).update({groups: firestore.FieldValue.arrayUnion(group)});\n        let p2 = this.db.collection('usergroups').doc(group).collection(\"members\").doc(uid).set({}); \n        await p1\n            .then(() => {\n                console.log('Successfully updated user groups');\n            })\n            .catch((err) => {\n                console.log('Error in updating user groups');\n            })\n        await p2\n            .then(() => {\n                console.log('Successfully updated usergroups');\n            })\n            .catch((err) => {\n                console.log('Error in updating usergroups');\n            })\n    }\n\n    /**\n     * Submit a request to join a group. \n     * \n     * @param name Name of group to join \n     * @param reason Reason for joining. \n     */\n    async requestJoinGroup(name: string, reason: string) {\n        const curr_uid = this.get_current_uid(); \n        const curr_user = (await this.get_user(curr_uid)) as entity.User; \n        this.db.collection('usergroups').doc(name).collection('join_requests').doc(curr_uid).set({\n            user: curr_uid, \n            first_name: curr_user.first_name, \n            last_name: curr_user.last_name, \n            reason: reason\n        });\n    }\n\n    /**\n     * \n     * @param name Name of group \n     * @param uid Uid of requesting user\n     * @param response \n     */\n    async respondToJoinRequest(name: string, uid: string, response: number) {\n        // Perms require membership in group, or membership chair \n        const perm1 = this.check_perms(this.get_current_uid(), \"membership\"); \n        const perm2 = this.check_perms(this.get_current_uid(), name); \n        if (await perm1 || await perm2) {\n            // approve & add \n            if (response === 1) {\n                this.db.collection('usergroups').doc(name).collection('members').doc(uid).set({}); \n                this.db.collection('users').doc(this.get_current_uid()).update({groups: firestore.FieldValue.arrayUnion(name)})     \n            }\n            // no matter what, just delete the request \n            this.db.collection('usergroups').doc(name).collection('join_requests').doc(uid).delete(); \n        }\n    }\n\n    /**\n     * Removes user from a set of groups. This removal happens in no particular order. \n     * If the user is not in a group specified in the groups parameter, it ignores it \n     * silently. Use [[User.get_user]] to get the user doc, which includes a list of groups. \n     * \n     * @param user The string of the user \n     * @param groups The list of groups the user is to be removed from. \n     */\n    async removeUserFromGroups(user:string, groups: Array<string>) {\n        // check perms \n        let perm:boolean = await this.check_perms(this.get_current_uid(), \"membership\"); \n\n        if (perm) {\n            // start the update operation \n            const comp_promise = this.db.collection('users').doc(user).update({groups: firestore.FieldValue.arrayRemove(groups)});\n            // delete from groups \n            groups.forEach(element => {\n                this.db.collection(\"usergroups\").doc(element).collection(\"members\").doc(user).delete(); \n            })\n            await comp_promise; \n            return true; \n        }\n        return false; \n\n    }\n\n\n    takePhotoAndCheckUserIn(event: number, context: any) {\n        /**\n         * Only proceed if context in Membership or External Affairs or Workshop\n         * 1. Use camera to get photo \n         * 2. AJAX POST to cloud function \n         * 3. Cloud function handles it. \n         */\n    }\n\n\n    checkInUser(user: number, event: number, context: any) {\n        // check in a user with number. \n        // get user doc and update, \n        // get event doc and update. \n    }\n\n    /**\n     * Generic Update to the User Document. It's faster to use a specified one. \n     * @param userUpdate The generic user update document. Should contain UID. \n     * @param context The current authentication context. \n     */\n    async updateUserDocument(userUpdate: any, context:any) {\n        /**\n         * 0. Only proceed if context.auth.uid == userUpdate.uid || context.auth.uid in Membership group\n         * 1. Get user document \n         * 2. Match which fields exist in the User entity \n         * 3. Set those fields to update in Firestore. \n         */\n    }\n}\n\nexport default UserApi; \n\n","/**\n * Provies the basics of file management. Has some scripts to \n * support special, common uploads such as Venmo and Resume. \n * This should be the POC for all google cloud storage functionality. \n */\nimport Firebase from \"./firebase\"; \n\n\n\nclass FileApi {\n    db: firebase.firestore.Firestore;  \n    storage: firebase.storage.Storage; \n    rootref: firebase.storage.Reference; \n    _fbapp: Firebase;\n    constructor(firebaseApp: Firebase) {\n        this._fbapp = firebaseApp; \n        this.db = firebaseApp.db; \n        this.storage = firebaseApp.app.storage(); \n        this.rootref = this.storage.ref(); \n    }\n\n    /**\n     * Generic upload service. Please use wrapper methods if possible. \n     *\n     * @param file The Blob or File API File (or bytes array)\n     * @param name The name of the file \n     * @param metadata Any associated metadata\n     * @param location Where to save the file. No / necessary.\n     */\n    uploadFile(file: Blob|File, name: string, metadata: any, location: string) {\n        const loc_ref = this.rootref.child(location + \"/\" + name); \n        return loc_ref.put(file, metadata);\n    }\n\n    /**\n     * Deletes the file present at the specified location with the specified name.\n     * @param file \n     * @param name \n     * @param metadata \n     * @param location \n     */\n    deleteFile(file: Blob|File, name: string, metadata: any, location: string) {\n        const loc_ref = this.rootref.child(location + \"/\" + name); \n        return loc_ref.delete();\n    }\n\n    /**\n     * Uploads a user's resume \n     * @param file The data itself \n     * @param name The name of the resume  \n     */\n    async uploadResume(file: Blob|File, name: string) {\n        let userRef = this.db.collection('users').doc(this._fbapp.user.get_current_uid());\n        let location = this._fbapp.user.get_current_uid() + \"/resume\";\n\n        \n\n        await this.uploadFile(file, \"resume_\" + name, {}, location)\n            .then(() => {\n                console.log('Successfully uploaded resume.')\n                let resume_uri = location + \"/resume_\" + name;\n                return userRef.update({\n                    resume_uri: resume_uri\n                })\n                .then(() => {\n                    console.log('Successfully updated user resume URI.');\n                })\n                .catch((err) => {\n                    console.log('Error updating resume URI: ' + err);\n                })\n            })\n            .catch((err) => {\n                console.log('Error uploading resume: ' + err);\n            })\n    }\n\n    /**\n     * Uploads a user's payment verification \n     * @param file The screenshot data \n     */\n    uploadVerification(file: Blob|File, name: string) {\n        let location = this._fbapp.user.get_current_uid() + \"/verification\";\n        return this.uploadFile(file, \"verification_\" + name, {}, location); \n    }\n}\n\nexport default FileApi; \n","/**\n * This file provides the Group Api. This includes basic functions \n * for managing groups, mostly related to creating, deleting, etc. \n */\nimport Firebase from \"./firebase\";\nimport {firestore} from \"firebase/app\";\n\n\nexport default class GroupApi {\n    db: any;\n    auth: any;\n    _fbapp: Firebase\n    constructor(firebaseApp: Firebase) {\n        this._fbapp = firebaseApp; \n        this.db = firebaseApp.db; \n    }\n\n    /**\n     * Get list of all groups. Really a wrapper around \n     * [[GroupApi.get_groups_and_members()]] \n     */\n    async get_groups(){\n        const docs: any = await this.get_groups_and_members(); \n        const mapped = docs.map((doc: { name: string; }) => doc.name); \n        return mapped;\n    }\n\n    /**\n     * Get list of all groups AND members in the group. \n     */\n    async get_groups_and_members() {\n        const documents =  await this.db.collection('usergroups').get(); \n        return documents.docs.map((doc: { data: () => any; }) => doc.data()); \n    }\n    /**\n     * Creates a Group\n     * Lets anyone create a group. Adds creating user to it by default. \n     * A few things happen to create a group. \n     * 1. A document is created under /usergroups with the document ID \n     * of the group name and the `name` member equal to the name of the group. \n     * 2. A collection is created under `/usergroups/{name}/members`. This will \n     * hold a document for each member in the group. A document is used so we can \n     * eventually extend functionality and have group owners/moderators if we want. \n     * 3. The calling user is added to the group\n     *   - the group `name` is added to the array under `/users/{uid}/groups` \n     *   - the user document is created for this group under `/usergroups/{name}/members/{uid}`\n     * \n     * \n     * @param name name of the group to create. \n     */\n    create_group(name: string) {\n        this.db.collection('usergroups').doc(name).set({name: name})\n        this.db.collection('usergroups').doc(name).collection('members').doc(this._fbapp.user.get_current_uid()).set({}) \n        // add user to group \n        const curr_uid = this._fbapp.user.get_current_uid(); \n        // console.log(name)\n        this.db.collection('users').doc(curr_uid).update({groups: firestore.FieldValue.arrayUnion(name)})\n    }\n\n    /**\n     * Deletes a group. Automatically disassociates \n     * all members from this group. Member must be part of \n     * Membership | Group Member. \n     * \n     * This probably won't work if there are any join requests. This is a todo. \n     * TODO: Make this work with join requests. See issue #77 on ZenHub. \n     * \n     * @param name Name of group to delete.\n     */\n    async delete_group(name: string) {\n        const curr_uid = this._fbapp.user.get_current_uid(); \n        const perm1 = await this._fbapp.user.check_perms(curr_uid, name); \n        const perm2 = await this._fbapp.user.check_perms(curr_uid, \"membership\"); \n        if (perm1 || perm2) {\n            let individualRemovalPromise = this.db.collection('usergroups').doc(name).collection('members').get().then((members: any) => {\n                // for each member in here, update their document to not include this group \n                members.docs.forEach((memberDocRef:any) => {\n                    this.db.collection('users').doc(memberDocRef.id).update({groups: firestore.FieldValue.arrayRemove(name)}); \n                    memberDocRef.ref.delete(); \n                })\n            });\n            await individualRemovalPromise; \n            // delete the group itself \n            this.db.collection('usergroups').doc(name).delete(); \n        }\n        else {\n            return false; \n        }\n    }\n\n    /**\n     * Gets a list of all pending join requests. \n     * @param name Get the name of the group you want to view. \n     */\n    getPendingRequests(name: string) {\n        return this.db.collection('usergroups').doc(name).collection('join_requests').get()\n    }\n}","/**\n * Web User API for Firebase \n * Following Singleton model as expected from a tutorial online\n * Instantiate with a firebase app instance - will use that \n */\nimport Firebase from \"./firebase\"; \nimport {firestore, auth, functions} from \"firebase/app\";\n\n/**\n * @author Vidhur Kumar\n */\nclass EventApi {\n    db: firebase.firestore.Firestore;\n    firebaseApp: Firebase;\n    functions: firebase.functions.Functions;\n    auth: firebase.auth.Auth;\n\n\n    /**\n     * \n     * @param firebaseApp \n     */\n    constructor(firebaseApp: Firebase) {\n        this.firebaseApp = firebaseApp;\n        this.db = firebaseApp.db;\n        this.functions = this.firebaseApp.app.functions();\n        this.auth = firebaseApp.app.auth();\n    }\n\n    /**\n     * \n     */\n    async get_events() {\n        return await this.db.collection(\"events\").get();\n    }\n\n    /**\n     * \n     * @param id \n     */\n    async get_event(id: string) {\n        return await this.db.collection(\"events\").doc(id).get();\n    }\n\n    /**\n     * \n     * @param name \n     * @param desc \n     * @param date \n     * @param type \n     * @param owner \n     */\n    async create_event(name: string, desc: string, XP: number, date: Date, type: string, owner: string, link: string) {\n        let newEventRef = this.db.collection(\"events\").doc();\n        return newEventRef.set({\n            name: name,\n            desc: desc,\n            XP: XP,\n            date: date,\n            type: type,\n            owner: owner,\n            links: [link],\n            rsvp_list: []\n        });\n    }\n\n    /**\n     * \n     * @param id \n     */\n    async delete_event(id: string) {\n        await this.db.collection('events').doc(id).delete()\n            .then(() => {\n                console.log('Event successfully deleted')\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    async delete_events() {\n        await this.db.collection('events').get().then(snapshot => {\n            snapshot.docs.forEach(doc => {\n                this.delete_event(doc.id);\n            })\n        })\n    }\n\n    async update_event(id: string, name: string, desc: string, XP: number, date: Date, type: string) {\n        let eventRef = this.db.collection(\"events\").doc(id);\n        return eventRef.update({\n            name: name,\n            desc: desc,\n            XP: XP,\n            date: date,\n            type: type,\n        })\n        .then(() => {\n            console.log('Successfully updated event.')\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }\n\n    async mark_event_xpAdded(id: string) {\n        let eventRef = this.db.collection(\"events\").doc(id);\n        return eventRef.update({\n            xpAdded: true\n        })\n        .then(() => {\n            console.log('Successfully updated event.')\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    }\n\n    async distribute_event_XP(id: string) {\n        let eventRef = this.db.collection(\"events\").doc(id);\n        eventRef.get().then(snapshot => {\n            console.log(snapshot.data());\n            return snapshot.data();\n        })\n    }\n\n    async add_field_to_event() {\n        await this.db.collection('events').get().then(snapshot => {\n            snapshot.docs.forEach(async doc => {\n                let eventRef = await this.db.collection('events').doc(doc.id);\n                eventRef.set({\n                    xpAdded: false\n                }, {merge: true});\n            })\n        })\n    }\n\n    /**\n     * Adds the specified user to the RSVP list of the event\n     * with the specified uid.\n     * \n     * TODO: Add user validation for specific type of events \n     * if needed.\n     * @param uid\n     * @param user \n     */\n    async rsvp_to_event(id: string, userName: string) {\n        let eventRef = this.db.collection(\"events\").doc(id);\n\n        eventRef.update({\n            rsvp_list: firestore.FieldValue.arrayUnion(userName)\n        });\n    }\n}\n\nexport default EventApi;","/**\n * It's OK that our app secret is in here because the app secret \n * is public anyway. Security comes from database writing rules \n * This includes a building class that provides all Firebase \n * functionality under one reference class. \n */\nimport app from 'firebase/app';\nimport 'firebase/firestore'; \nimport 'firebase/auth'\nimport 'firebase/functions'\nimport 'firebase/storage'\nimport UserApi from \"./user\";  \nimport FileApi from \"./file\"; \nimport GroupApi from \"./groups\"; \nimport EventApi from './event';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD_OKCjgVUePBaR6KmvjCirYEOSyB_8qTg\",\n    authDomain: \"dsgt-website.firebaseapp.com\",\n    databaseURL: \"https://dsgt-website.firebaseio.com\",\n    projectId: \"dsgt-website\",\n    storageBucket: \"dsgt-website.appspot.com\",\n    messagingSenderId: \"672446353769\",\n    appId: \"1:672446353769:web:f98c65e7ff823af3\"\n};\n\n/**\n * I'm quite proud of this build pattern. We \n * link up the classes from the inividual APIs \n * to the Firebase class itself, so we really have \n * a series of singletons working together under \n * one singleton, all accessing the same data, while \n * keeping file sizes manageable. \n * - Raj\n */\nclass Firebase {\n    constructor() {\n        this.isLocalHost = Boolean(\n            window.location.hostname === 'localhost' ||\n              // [::1] is the IPv6 localhost address.\n              window.location.hostname === '[::1]' ||\n              // 127.0.0.1/8 is considered localhost for IPv4.\n              window.location.hostname.match(\n                /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n              )\n          );\n        app.initializeApp(firebaseConfig); \n        this.app = app; \n        this.db = this.app.firestore(); \n        this.user = new UserApi(this); \n        this.file = new FileApi(this); \n        this.group = new GroupApi(this); \n        this.event = new EventApi(this);\n    }\n}\n\nexport default Firebase; ","import FirebaseContext, {withFirebase} from \"./context\"; \n\nimport Firebase from \"./firebase\"; \n\nexport default Firebase; \n\nexport { FirebaseContext , withFirebase}; ","import React from 'react'; \nimport AuthUserContext from \"./context\"; \nimport { withFirebase } from \"../Firebase\"\n\n/**\n * Magically supports authentication. I'm not sure \n * how it works, I followed a tutorial and it somehow \n * just worked. My best-guesses are embedded. \n * \n * @author Raj Shrimali\n */\nconst withAuthentication = Component => {\n    class withAuthentication extends React.Component {\n        constructor(props) {\n            super(props); \n            // keep track of authenticated user. \n            this.state = {\n                authUser: null\n            }; \n\n\n        }\n        //upon the creation of the component, we add a listener \n        // to the authneication state of firebase. \n        componentDidMount() {\n            // the listener goes ahead and sets the authUser upon firebase authenicatino changes \n            this.listener = this.props.firebase.user.auth.onAuthStateChanged(\n                authUser => {\n                    authUser\n                    ? this.setState({authUser})\n                    : this.setState({authUser: null}); \n                },\n              ); \n        }\n    \n        // upon removing the app, we call the listner. Not sure what this \n        // does, but it's supposed to prevent memory leaks\n        componentWillUnmount() {\n            this.listener(); \n        }\n    \n        // we render this, so the component that is called withAuthentication() has \n        // this as a super-context. The super-context provides the authUser, so \n        // the component inside can access it. \n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props}/>\n\n                </AuthUserContext.Provider>\n            )\n        }\n    }\n    // the compoennt is rendered inside firebase. \n    // so everythign with authenication is automatically inside firebase. \n    return withFirebase(withAuthentication);\n}\n\nexport default withAuthentication;\n","import React from 'react'; \nimport {Link} from 'react-router-dom'; \nimport Nav from 'react-bootstrap/Nav'; \nimport Navbar from 'react-bootstrap/Navbar'; \nimport {Button} from 'react-bootstrap';\nimport * as ROUTES from \"../../config/routes\"\nimport {AuthUserContext, withAuthentication} from \"../Session\"; \nimport {withRouter} from \"react-router-dom\"; \nimport {withFirebase} from '../Firebase';\nimport './Navigation.css';\n\n/**\n * Login button on the Navbar that gets conditionally rendered.\n */\nclass LoginComponent extends React.Component {\n    constructor(props) {\n        super(props); \n        this.SignOut = this.SignOut.bind(this); \n    }\n\n    SignOut(event) {\n        event.preventDefault(); \n        this.props.firebase.user.signout().then(() => {\n            this.props.history.push(\"/\"); \n        }); \n    }\n\n    render() {\n        if (this.context) {\n        return (\n            <Nav.Link href=\"\" onClick={this.SignOut}>Sign Out</Nav.Link>\n           )\n        }\n        else {\n            return (<Nav.Link href={ROUTES.LOGIN}>Login</Nav.Link>)\n        }\n    }\n}\n\n/**\n * Sign up button on the Navbar that also gets conditionally rendered.\n */\nclass SignupComponent extends React.Component {\n    render() {\n        if(this.context) {\n            return null;\n        } else {\n            return (\n                <Nav.Link href={ROUTES.SIGNUP}>Sign Up</Nav.Link>\n            )\n        }\n    }\n}\n\n\nLoginComponent.contextType = AuthUserContext; \nlet AuthLoginComponent = withRouter(withAuthentication(LoginComponent)); \n\nSignupComponent.contextType = AuthUserContext;\nlet AuthSignUpComponent = withRouter(withAuthentication(SignupComponent));\n\nclass Navigation extends React.Component {\n    constructor(props, authUser) {\n        super(props); \n        \n    }\n    render() {\n        let isLoggedin = this.props.firebase.user.auth.currentUser;\n        return (\n            <div className=\"padded\">\n                <Navbar className=\"main-navbar\" sticky=\"top\" expand=\"md\">\n                    <Navbar.Brand><Link to='/'><img src=\"/img/icon.png\" alt=\"DSGT\"/></Link></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse>\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link href={ROUTES.LANDING +\"#about\"}>About</Nav.Link>\n                            {/* <Nav.Link href={ROUTES.LANDING + \"#projects\"}>Projects</Nav.Link> */}\n                            <Nav.Link href={ROUTES.LANDING + \"#events\"}>Events</Nav.Link>\n                            <Nav.Link href={ROUTES.LANDING + \"#join\"}>Join</Nav.Link>\n                            <Nav.Link href={ROUTES.LANDING + \"#resources\"}>Resources</Nav.Link>\n                            <Nav.Link href={ROUTES.BLOG}>Blog</Nav.Link>                            \n                            <Nav.Link href={ROUTES.LANDING + \"#contact\"}>Contact</Nav.Link>\n                        </Nav>\n                        <Nav>\n                            {isLoggedin && \n                                    <Button className=\"dsgt-button\" variant=\"primary\" href={ROUTES.DASHBOARD_HOME}>Go To Dashboard</Button>\n                            }\n                            <AuthLoginComponent /> \n                            <AuthSignUpComponent />\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default withFirebase(Navigation);\n\n\n\n","/**\n * Self-explanatory; routing. \n */\nexport const LANDING=\"/\"; \nexport const SIGNUP = '/signup'; \nexport const LOGIN = '/login'; \nexport const BLOG = 'https://medium.com/data-science-georgia-tech'\n\nexport const DASHBOARD_HOME = '/dashboard/home';\nexport const DASHBORD_EDIT_PROFILE = '/dashboard/edit';\nexport const DASHBOARD_EVENT = '/dashboard/event';\nexport const DASHBOARD_GROUP = '/dashboard/group';","\nimport React from 'react';\nimport {Row, Col, Button} from 'react-bootstrap'; \nimport * as CONSTANTS from \"../../config/config\";\n\nconst ContactLink = (props) => {\n    return (\n        <a href={props.href} className=\"link-override contact-col\" {...props}>{props.children}</a>\n    )\n}\nexport default function ContactCore(){ return (\n        <React.Fragment>\n\n            <Row>\n                <Col className=\"text-center\">\n                    <Button href={CONSTANTS.SUBSCRIBE}>Subscribe to our Mailing List!</Button>\n                    {/* <a href={CONSTANTS.SUBSCRIBE} className=\"btn link-override link-button\" role=\"button\">\n                        Subscribe to our Mailing List!\n                    </a> */}\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={4} className=\"text-center\">\n                    <ContactLink href={CONSTANTS.FACEBOOK} target=\"_blank\"><span className=\"fab fa-facebook \"></span></ContactLink>\n                </Col>\n                <Col sm={4} className=\"text-center\">\n                    <ContactLink href={CONSTANTS.LINKEDIN}><span className=\"fab fa-linkedin\"></span></ContactLink>\n                </Col>\n                <Col sm={4} className=\"text-center\">\n                    <ContactLink href={CONSTANTS.EMAIL_URL}><span className=\"fas fa-envelope\"></span></ContactLink>\n                </Col>\n            </Row>\n            </React.Fragment>\n    \n)}","import React from 'react';\nimport {Container, Row, Col, Table, Button} from 'react-bootstrap'; \nimport * as CONSTANTS from \"../../config/config\";\n// import * as ROUTES from \"../../config/routes\";  \n// import ProjectCore from \"./Project\"\nimport ContactCore from \"./Contact\" \n\nimport './HomePage.css';\n\n/**\n * This is the homepage of the website.\n * Split up into React Fragments to provide modularity.\n */\n\nclass Section extends React.Component {\n    render() {\n        return (\n            <section id={this.props.id}>\n                <Container> \n                    <Row> \n                        <Col className=\"text-center\">\n                            <h2 className=\"section-heading text-uppercase\">{this.props.heading}</h2>\n                            {this.props.subheading ? <h3 className=\"section-subheading text-muted\">{this.props.subheading}</h3> : \"\"} \n                        </Col>\n                    </Row>\n                    {this.props.children}\n                </Container>\n            </section>\n        )\n    }\n}\n\nconst Hero = () => {\n\n    return(\n    <section id=\"page-top\">\n        <div className=\"jumbotron\">\n            <Row>\n                {/* <Col sm={12} className=\"text-center\">\n                    <div className=\"intro-text\">\n                        <div className=\"intro-heading text-uppercase\">Data Science @ Georgia Tech</div>\n                        <div className=\"intro-subtext text-uppercase\">Data Science with a Focus on the Community</div>\n                    </div>\n                </Col> */}\n            </Row>\n            <Row>\n                <Col sm=\"12\" className=\"text-center\">\n                    {/* <a href={CONSTANTS.SUBSCRIBE} id=\"welcomebutton\" className=\"btn btn-large btn-outline-dark link-override link-button\" role=\"button\">Subscribe to our mailling list</a> <br/> */}\n                </Col>\n            </Row>\n            <Row>\n                <Col sm=\"12\" className=\"text-center\">\n                    <Button className=\"c1-signup-button\" href=\"https://c1games.com/gatech\" variant=\"info\" size=\"lg\">Sign up to participate!</Button>\n                </Col>\n            </Row>\n        </div>\n    </section>\n)}\n\nconst About = () => { return (\n    <Section id=\"about\" heading=\"About Us\" subheading=\"Georgia Tech's largest community of student data scientists\">\n        <Row> \n            <Col sm={12}><h3 className=\"text-center\"> The Big Ideas </h3></Col>\n        </Row>\n        <Row> \n            <Col sm={12} md={5}><h4 className=\"text-uppercase\">Provide</h4></Col>\n            <Col sm={12} md={7}>\n            <p>\n            Data science has the potential to improve our communities, so we run projects with that sole purpose. Our\n            projects are chosen because of their potential impact, both on our campus and the global community at large. \n            We don't want our members to be hindered by lack of money, so our featured projects receive funding for \n            resources that are crucial to their success. <br/>\n\n            We recognize a good idea can come from anywhere, so we encourage our members to pursue their own projects. \n            Member-initiated projects receive the support of the club, and if they satisfy our community-oriented criteria, \n            may receive funding. \n            </p>\n            </Col>\n        </Row>\n        <Row>\n            <Col sm={12} md={5} className=\"order-sm-last order-md-first\"><h4 className=\"text-uppercase\">Inform</h4></Col>\n            <Col sm={12} md={7} className=\"order-sm-last order-md-first\">\n            <p>\n            Data science is a hard field to get into, and can be intimidating for those who are unfamiliar with it. \n            To make the learning process easier for our members, we host weekly workshops that let them interactively get \n            familiar with data science. We also host monthly public workshops that help those who are interested learn more \n            about the field and get their feet wet with basic data science skills. \n            </p>\n            </Col>\n        </Row>\n        <Row>\n            <Col sm={12} md={5}><h4 className=\"text-uppercase\">Grow</h4></Col>\n            <Col sm={12} md={7}>\n            <p>\n                We want our members to be well-prepared for their future. After all, we are nothing without them! \n                Our special events include corporate information sessions, game nights, and networking events that \n                allow our members to devleop themselves professionally. We are also planning on hosting a data-science-oriented \n                hackathon in Spring 2019. \n            </p>\n            </Col>\n        </Row>\n    </Section>\n)}\n\nconst Join = () => {return (\n    <Section id=\"join\" heading=\"Join\" subheading=\"Sign Up Now!\">\n        {/* <Row>\n            <Col className=\"text-center\">\n            <a href={ROUTES.SIGNUP} className=\"btn btn-primary\">Sign up Now</a>\n            </Col>\n\n        </Row> */}\n        <Row> \n        <Col sm={6}>\n            <h3>Joining with Venmo</h3> \n            <ol> \n                <li> Venmo ${CONSTANTS.DUES_SEMESTER} for a semester membership, \n                or ${CONSTANTS.DUES_YEAR} for a year membership, to @datascience-gt </li>\n                <li> Take a screenshot of your payment </li>\n                <li> Click the signup button, fill out the form, select \"Venmo\", and attach your screenshot</li>\n                <li> Hit \"Submit\", and you're all done! We'll verify your payment and send you an invite \n                    to the slack within a few days. Welcome to the team! \n                </li>\n            </ol>\n        </Col>\n        <Col sm={6}>\n                <h3> Joining with Cash </h3> \n                Don't have a Venmo? Refuse to use online payments to stick it to our corporate overlords? \n                No problem. \n                <ol>\n                    <li> Pay in cash to any member of the DSGT Team </li>\n                    <li> Get their name when you pay them! </li>\n                    <li> Go to the signup form, fill it out, select \"Cash\" and put in the amount you paid along with \n                        the name of the person you gave cash to. \n                        It's ${CONSTANTS.DUES_SEMESTER} for a semester, or ${CONSTANTS.DUES_YEAR} for a year. \n                    </li>\n                    <li> Hit submit and you're done! It might take us a few days to verify your payment, but \n                        once we do we'll send you a invite to our Slack channel and hook you up with the getting \n                        started material. Glad to have you on the team! \n                    </li>\n                </ol>\n            </Col>\n        </Row>\n    </Section>\n)}\n\n// let Projects = () => {\n//     return (\n//         <Section id=\"projects\" heading=\"Projects\" subheading=\"See what we're working on\">\n//             <ProjectCore/>\n//         </Section>\n//     )\n// }\n\nconst Contact = () => { return (\n    <Section id=\"contact\" heading=\"Contact Us\" subheading=\"Stay in Touch\">\n        {ContactCore()}\n    </Section>\n)}\n\n\n// const Events = () => {\n//     return (\n//         <Section id=\"events\" heading=\"Upcoming Events\">\n//             <div className=\"responsiveCal\">\n//                 <iframe title=\"calendar\" width=\"100%\" height='600px' id=\"calframe\" src=\"https://calendar.google.com/calendar/embed?height=600&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=kha5imvol6hbevvblb7sr48vjs%40group.calendar.google.com&amp;color=%23711616&amp;ctz=America%2FNew_York\" scrolling=\"no\" frameBorder='0'></iframe>\n//             </div>\n//         </Section>\n//     )\n// }\n\nconst MeetingContent = (props) => {\n    return (\n        <div className=\"parent-meetingdesc\">\n            <Button href={props.slidesURL} variant=\"warning\" type=\"button\" size=\"sm\">Slides</Button>\n            <Button href={props.notebookURL} className=\"notebook-button\" type=\"button\" size=\"sm\">Notebook</Button>\n            <Button href={props.materialsURL} variant=\"primary\" type=\"button\" size=\"sm\">Materials</Button>\n        </div>\n    )\n}\n\nconst Meetings = () => {\n    return (\n        <Section id=\"meetings\" heading=\"Meetings\">\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                    <th>Date</th>\n                    <th>Workshop</th>\n                    <th>Content</th>\n                    {/* <th>Slides</th>\n                    <th>Materials</th> */}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>9/9/2019</td>\n                        <td>\n                        Introduction to Data Science (Track 1)\n                        {/* <MeetingContent \n                            name=\"Introduction to Data Science (Track 1)\"\n                            slidesURL=\"https://drive.google.com/open?id=1KGVdH3CHyo99EA3kIVZPT5FTXyuVa-SvNNJCO5rAF8s\"\n                            materialsURL=\"https://drive.google.com/open?id=1cKG75Q1vbvUrDLhORfqq4coSqRlvuvGo\"\n                        /> */}\n                        </td>\n                        <td>\n                            <MeetingContent \n                                slidesURL=\"https://drive.google.com/open?id=1KGVdH3CHyo99EA3kIVZPT5FTXyuVa-SvNNJCO5rAF8s\"\n                                materialsURL=\"https://drive.google.com/open?id=1cKG75Q1vbvUrDLhORfqq4coSqRlvuvGo\"\n                            />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>9/16/2019</td>\n                        <td>Programming for Data Science (Track 1)</td>\n                        <td>\n                        <MeetingContent \n                            slidesURL=\"https://drive.google.com/open?id=1tpm72vMscR8FvMCahixmWs5588cG9nCFxjBqVyvflnw\"\n                            notebookURL=\"https://nbviewer.jupyter.org/github/DataScience-GT/Workshops/blob/master/Fall%202019/Track-1/Programming%20for%20Data%20Science/Programming%20for%20Data%20Science.ipynb\"\n                            materialsURL=\"https://drive.google.com/open?id=18sybnYBrxJj_B7Tng_-WLQKEwQanTwJz\"\n                        />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>9/23/2019</td>\n                        <td>Mathematical Principles for Data Science (Track 1)</td>\n                        <td>\n                        <MeetingContent \n                            slidesURL=\"https://drive.google.com/open?id=1iOWIJtb0kE2xg5lgsq5c404DkqZo_5ScJhlVJqKiWhw\"\n                            notebookURL=\"https://nbviewer.jupyter.org/github/DataScience-GT/Workshops/blob/master/Fall%202019/Track-1/Mathematical%20Fundamentals%20for%20Data%20Science/Math%20Principles.ipynb\"\n                            materialsURL=\"https://drive.google.com/open?id=1xVAenbk4UPnq4pN2j6z7ML5HeiADjAUp\"\n                        />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>9/30/2019</td>\n                        <td>Survey of Algorithms for Data Science (Track 1)</td>\n                        <td>\n                        <MeetingContent \n                            slidesURL=\"https://drive.google.com/open?id=1QQ1p0lNYJ5Q1miOpGcm9D9EPmYRruX08d59nSFvarlY\"\n                            notebookURL=\"https://nbviewer.jupyter.org/github/DataScience-GT/Workshops/blob/master/Fall%202019/Track-1/Survey%20of%20Algorithms%20for%20Data%20Science/Survey%20of%20Algorithms.ipynb\"\n                            materialsURL=\"https://drive.google.com/open?id=1tfQyfYRJ9sAz3utXVlrOu3-azFy9v0hV\"\n                        />\n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n        </Section>\n    )\n}\n\n// const Team = () => {\n//     return (\n//         <Section id=\"team\" heading=\"Meet our Team\">\n\n//         </Section>\n//     )\n// }\n\n// const Resources = () => {return (\n//     <Section id=\"resources\" heading=\"Getting Started Resources\">\n//         <Row>\n//             <Col sm={12} md={6}>\n//                 <h3 className=\"section-subheading text-muted\">Public Content</h3>\n//                 <p>\n//                     We have some of our getting started content publicly available, no membership required. \n//                     Below, you can find a drive link to our first few workshops, so you can try it out \n//                     and see what type of things we teach. \n//                 </p>\n//                 <a href=\"https://drive.google.com/open?id=1CPCUEXDQA5nriNLfnElGKFWGeVWgPgvM\">Drive Link</a>\n//             </Col>\n//             <Col sm={12} md={6}>\n//                 <h3 className=\"section-subheading text-muted\">Our Custom Curriculum</h3>\n//                 <p>\n//                     Our workshop people have worked hard to design a custom curriculum, that gets \n//                     the basics of data science across in the span of a semester. This pulls from \n//                     some of the top data science programs in the country! You can give it a look  \n//                     <a href=\"https://drive.google.com/open?id=1PPMCEZUK4J0apsABmGaw1LFK7vXh3mFzJcSR1YRmlxE\"> here.</a>\n//                 </p>\n//             </Col>\n//         </Row>\n//     </Section>\n// )}\n\n \n\nexport default class HomePage extends React.Component {\n\n    render() {\n\n        return (                \n\n            <React.Fragment>\n                <Hero />\n                <Container> \n\n                <About />\n\n                {/* <Projects /> */}\n\n                {/* <Events /> */}\n\n                {/* <Team /> */}\n                <Meetings />\n                <Join/>\n\n                {/* <Resources /> */}\n\n                <Contact/>\n      \n\n                </Container>\n            </React.Fragment>\n            \n        );\n    }\n}","/**\n * This is responsible for user sign-up. We collect data \n * and then call the createUser function, which signs them up. \n * Then, the process flows as normal; firebase signup followed \n * by a document in our `/users` collection. \n */\nimport React from 'react';\nimport { Button, Form, Container, Row, Col } from \"react-bootstrap\";\n// import SearchBox from './Search Box/SearchBox';\nimport { withFirebase } from '../Firebase';\nimport { compose } from 'recompose'; \nimport {withRouter} from 'react-router-dom'; \nimport * as ROUTES from '../../config/routes'\nimport * as CONSTANTS from \"../../config/config\"\n\nclass SignUpForm extends React.Component {\n    constructor(props) {\n        super(props); \n        this.state = {\n            email: \"\", \n            password: \"\", \n            first_name: \"\", \n            last_name: \"\",\n            major: \"\",\n            year: \"1\",\n            phone_number: \"\", \n            verification: \"\", \n            verification_method: \"venmo\", \n            vs_amount: 0, \n            vs_person: \"\"\n        }; \n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleFileChange = this.handleFileChange.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this); \n    }\n\n    handleInputChange(event) {\n        const target = event.target; \n        const value = target.type === \"checkbox\" ? target.checked : target.value; \n        const name = target.name; \n        this.setState({\n            [name]: value\n        }); \n    }\n    handleFileChange(event) {\n        const target = event.target; \n        const file = target.files[0]; \n     \n        this.setState({\n            \"verification\": file\n        }); \n    }\n\n    async handleSubmit(event) {\n        // try creating an account \n        event.preventDefault(); \n        let state = this.state; \n        try {\n            await this.props.firebase.user.createUser(state.email, state.password, \n                state.first_name, state.last_name, state.alt_email, state.major, state.year, state.phone_number); \n            if (this.state.verification_method === \"cash\") {\n                await this.props.firebase.user.updateUserVerificationCash(this.state.vs_amount, this.state.vs_person); \n            } else if (this.state.verification_method === \"venmo\") {\n                await this.props.firebase.user.updateUserVerificationVenmo(this.state.verification, this.state.verification.name); \n            }\n            this.props.history.push(ROUTES.DASHBOARD_HOME); \n        } catch(err) {\n            alert(err); \n            this.props.history.push(ROUTES.SIGNUP); \n        } \n    }\n\n    getVerificationStub(method) {\n        if (method === \"venmo\") {\n            return (\n                <Form.Group> \n                <Form.Label> Verification Picture</Form.Label>\n                <Form.Control onChange={this.handleFileChange} name=\"verification\" type=\"file\" accept=\"image/png, image/jpg, image/jpeg\" />\n                </Form.Group>\n            )\n        } else if (method === \"cash\") {\n            return (\n                <Form.Group>\n                    <Form.Label>Amount</Form.Label>\n                    <Form.Control name=\"vs_amount\" onChange={this.handleInputChange} type=\"number\"></Form.Control>\n                    <Form.Label>Person you Paid To</Form.Label>\n                    <Form.Control name=\"vs_person\" onChange={this.handleInputChange} type=\"text\"></Form.Control>\n                </Form.Group> \n            )\n        }\n    }\n    render() {\n        return (\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group> \n                        <Form.Label>GT Email Address</Form.Label> \n                        <Form.Control onChange={this.handleInputChange} name=\"email\" type=\"email\" placeholder=\"Enter GT Email\" /> \n                    </Form.Group>\n\n                    {/* Password Entry - TODO Include Password Validation */}\n                    <Form.Group>\n                        <Form.Label> New Password </Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"password\" type=\"password\" placeholder=\"Password\" />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"first_name\" type=\"text\" placeholder=\"First Name\" />\n                    </Form.Group>\n\n                    <Form.Group> \n                        <Form.Label>Last Name</Form.Label> \n                        <Form.Control onChange={this.handleInputChange} name=\"last_name\" type=\"text\" placeholder=\"Last Name\" /> \n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Alternate Email Address (i.e. gmail)</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"alt_email\" type=\"email\" placeholder=\"Alternate Email\" /> \n                    </Form.Group>\n\n                    <Form.Group> \n                        <Form.Label>Major</Form.Label> \n                        {/* <SearchBox onChange={this.handleInputChange} data={CONSTANTS.MAJORS} name=\"major\" /> */}\n                        <Form.Control onChange={this.handleInputChange} name=\"major\" type=\"text\" placeholder=\"Major\" /> \n                    </Form.Group>\n\n                    <Form.Group controlId=\"\">\n                        <Form.Label>Year</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"year\" type=\"text\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>Graduate</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    {/* <SearchBox /> */}\n\n                    <Form.Group>\n                        <Form.Label>Phone Number</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"phone_number\" type=\"tel\" placeholder=\"Phone Number\" /> \n                    </Form.Group>\n\n                    {/* TODO: REMOVE THIS AND MOVE TO SECONDARY STAGE!!! \n                        This is where the user can select which payment method they prefer. \n                    */}\n                    <Row> \n                        <Col sm={6}>\n                            <h3>Joining with Venmo</h3> \n                            <ol> \n                                <li> Venmo ${CONSTANTS.DUES_SEMESTER} for a semester membership, \n                                or ${CONSTANTS.DUES_YEAR} for a year membership, to @datascience-gt </li>\n                                <li> Take a screenshot of your payment </li>\n                                <li> Click the signup button, fill out the form, select \"Venmo\", and attach your screenshot</li>\n                                <li> Hit \"Submit\", and you're all done! We'll verify your payment and send you an invite \n                                    to the slack within a few days. Welcome to the team! \n                                </li>\n                            </ol>\n                        </Col>\n                        <Col sm={6}>\n                            <h3> Joining with Cash </h3> \n                            Don't have a Venmo? Refuse to use online payments to stick it to our corporate overlords? \n                            No problem. \n                            <ol>\n                                <li> Pay in cash to any member of the DSGT Team </li>\n                                <li> Get their name when you pay them! </li>\n                                <li> Go to the signup form, fill it out, select \"Cash\" and put in the amount you paid along with \n                                    the name of the person you gave cash to. \n                                    It's ${CONSTANTS.DUES_SEMESTER} for a semester, or ${CONSTANTS.DUES_YEAR} for a year. \n                                </li>\n                                <li> Hit submit and you're done! It might take us a few days to verify your payment, but \n                                    once we do we'll send you a invite to our Slack channel and hook you up with the getting \n                                    started material. Glad to have you on the team! \n                                </li>\n                            </ol>\n                        </Col>\n                    </Row>\n                    <Form.Group>\n                        <Form.Label> Select preferred payment method </Form.Label>\n                        <div>\n                            <Form.Check inline onChange={this.handleInputChange} type=\"radio\" name=\"verification_method\" value=\"venmo\" checked={this.state.verification_method === \"venmo\"} label=\"Venmo\" />\n                            <Form.Check inline onChange={this.handleInputChange} type=\"radio\" name=\"verification_method\" value=\"cash\" checked={this.state.verification_method === \"cash\"} label=\"Cash\" /> \n                            <Form.Check inline onChange={this.handleInputChange} type=\"radio\" name=\"verification_method\" value=\"defer\" checked={this.state.verification_method === \"defer\"} label=\"Defer\" />  \n                        </div>\n                    </Form.Group>\n                    {this.getVerificationStub(this.state.verification_method)}\n                    {/* <Form.Group>\n                        <Form.Text>More About You</Form.Text>\n                    </Form.Group> */}\n\n                    <Button variant=\"primary\" type=\"submit\"> \n                        Sign Up \n                    </Button>\n\n                </Form>\n        )\n    }\n}\n\nconst SignUpWithFirebase = compose(withRouter, withFirebase)(SignUpForm); \n\nexport default class SignUpPage extends React.Component {\n    render() {\n        return (\n            <div className=\"Login\"> \n            <Container> \n                <h1>Looking to join us? Sign up here!</h1>                \n                <SignUpWithFirebase /> \n            </Container>\n            </div>\n        )\n    }\n}","/**\n * This file provides the login functionality. Upon login, \n * the user is redirected to the dashboard. \n */\nimport React from 'react';\nimport { Button, Form, Container } from \"react-bootstrap\";\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from \"../../config/routes\"; \nimport { compose } from 'recompose'\nimport {withRouter} from 'react-router-dom'; \nimport './LoginPage.css';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props); \n    this.state = {\n      email_addr: \"\", \n      password: \"\", \n      stay_signed_in: false\n    }; \n\n    this.handleInputChange= this.handleInputChange.bind(this); \n    this.handleSubmit = this.handleSubmit.bind(this); \n  }\n\n  handleInputChange(event) {\n    const target = event.target; \n    // if it's a checkbox (i.e. stay signed out, we want to use the checked)\n    const value = target.type === 'checkbox' ? target.checked: target.value; \n    const name = target.name; \n    this.setState({\n      [name]: value\n    })\n  }\n\n  async handleSubmit(event) {\n    // sign user in \n    event.preventDefault(); \n    try {\n      await this.props.firebase.user.sign_in(this.state.email_addr, this.state.password); \n      this.props.history.push(ROUTES.DASHBOARD_HOME); \n    } catch (err) {\n      if (err.code === \"auth/user-not-found\") {\n        alert(\"Email not found - did you make a typo?\"); \n      } else if (err.code === \"auth/wrong-password\") {\n        alert(\"Wrong password - please try again\"); \n      } else {\n        console.log(err); \n      }\n    }\n  }\n  render() {\n    return (\n    <Form onSubmit={this.handleSubmit}>\n      <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control onChange={this.handleInputChange} name=\"email_addr\" type=\"email\" placeholder=\"Enter email\" />\n          <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n          </Form.Text>\n      </Form.Group>\n\n      <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control onChange={this.handleInputChange} name=\"password\" type=\"password\" placeholder=\"Password\" />\n      </Form.Group>\n      <Form.Group controlId=\"formBasicChecbox\">\n          <Form.Check onChange={this.handleInputChange} name=\"stay_signed_in\" type=\"checkbox\" label=\"Stay Signed In\" />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n          Submit\n      </Button>\n    </Form>)\n  }\n}\nconst LoginWithFirebase = compose(withRouter, withFirebase)(LoginForm); \nexport default class LoginPage extends React.Component {\n    render() {\n        return (\n          <div className=\"Login\">\n            <Container className=\"box\">\n              <h1>Log in</h1>\n              <LoginWithFirebase />\n            </Container>\n          </div>\n        );\n      }\n}","import React from 'react'; \nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Button } from 'react-bootstrap';\nimport * as ROUTES from '../../../../config/routes';\nimport firebase from 'firebase';\nimport './DashboardNavbar.css';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class DashboardNavbar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isExec: false\n        }\n    }\n\n\n    componentDidMount() {\n        this.populateUser();\n    }\n\n    async populateUser() {\n        await firebase.auth().onAuthStateChanged((user) => {\n            this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid()).then(snapshot => {\n                if(snapshot['groups'].includes('Exec')) {\n                    this.setState({isExec: true});\n                }\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar className=\"dashboard-navbar\" collapseOnSelect expand=\"lg\" variant=\"dark\">\n                    {/* <Navbar.Brand href=\"#home\">Dashboard</Navbar.Brand> */}\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link name=\"home\" href={ROUTES.DASHBOARD_HOME}>Home</Nav.Link>\n                            <Nav.Link name=\"edit\" href={ROUTES.DASHBORD_EDIT_PROFILE}>Edit Profile</Nav.Link>\n                            {this.state.isExec &&\n                                <Nav.Link name=\"event\" href={ROUTES.DASHBOARD_EVENT}>Edit Events</Nav.Link>\n                            }\n                            {this.state.isExec &&\n                                <Nav.Link name=\"group\" href={ROUTES.DASHBOARD_GROUP}>Edit Groups</Nav.Link>                        \n                            }\n                            <Button href=\"https://drive.google.com/open?id=1c9qtc5oo0UQv_iSNYtJ1gyyF7_dHA6li\" variant=\"warning\">Checkpoint</Button>\n                        </Nav>\n                        <Nav>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}","import React from 'react'; \n\n/**\n * @author Vidhur Kumar\n */\nexport default class UserWelcomeHeader extends React.Component {\n    static descriptor = \"User Welcome\";\n    render() {\n        return (\n            <h1><strong>Welcome {this.props.user.first_name}!</strong></h1>\n        )\n    }\n}","import React from 'react';\nimport {Badge} from 'react-bootstrap';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class EventTypeBadge extends React.Component {\n    /**\n     * Maps the specified event type to the corresponding badge variant.\n     */\n    mapTypeToBadgeVariant = (type) => {\n        switch(type) {\n            case \"General Meeting\":\n                return \"primary\";\n\n            case \"Workshop\":\n                return \"warning\";\n\n            case \"Special\":\n                return \"danger\";\n\n            case \"Project\":\n                return \"success\";\n\n            default:\n                return \"secondary\";\n        }\n    }\n\n    mapTypeToBadgeText = (type) => {\n        switch(type) {\n            case \"gm\":\n                return \"General Meeting\";\n\n            case \"workshop\":\n                return \"Workshop\";\n\n            case \"special\":\n                return \"Special\";\n\n            case \"project\":\n                return \"Project\";\n\n            default:\n                return \"Unknown\";\n        }\n    }\n\n    render() {\n        return (\n            <h5><Badge pill variant={this.mapTypeToBadgeVariant(this.props.type)}>{this.props.type}</Badge></h5>\n        );\n    }\n}","import React from 'react';\nimport {Badge} from 'react-bootstrap';\n\nexport default class EventXPBadge extends React.Component {\n\n    render() {\n        return (\n            <Badge pill variant=\"info\">XP: {this.props.XP}</Badge>\n        )\n    }\n}","import React from 'react';\nimport {Button, Form} from 'react-bootstrap';\n\nimport './EventEditForm.css';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class EventEditForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            name: this.props.event.data.name,\n            desc: this.props.event.data.desc,\n            date: this.props.event.data.date,\n            type: this.props.event.data.type,\n            XP: this.props.event.data.XP,\n            show: this.props.show\n        }\n\n        this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid())\n        .then(snapshot => {\n            this.setState({username: snapshot['first_name'] + ' ' + snapshot['last_name']});\n        });\n    }\n\n    handleInputChange = (event) => {\n        this.setState({[event.target.name]: event.target.value}); \n    }\n\n\n    render() {\n        const isEventOwnerContext = this.state.username !== this.props.event.data.owner;\n        return (\n            <Form>\n                <Form.Group>\n                    <Form.Label>Event Name</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} name=\"name\" defaultValue={this.props.event.data.name}></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Event Description</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} name=\"desc\" defaultValue={this.props.event.data.desc}></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>XP Points</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} name=\"XP\" type=\"number\" defaultValue={this.props.event.data.XP}></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Event Date</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} name=\"date\" type=\"date\" defaultValue={this.props.event.data.date}></Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Event Type</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"type\">\n                        <option selected={this.props.event.data.type === 'General Meeting'}>General Meeting</option>\n                        <option selected={this.props.event.data.type === 'Workshop'}>Workshop</option>\n                        <option selected={this.props.event.data.type === 'Project'}>Project</option>\n                        <option selected={this.props.event.data.type === 'Special'}>Special</option>\n                    </Form.Control>\n                </Form.Group>\n                <div className=\"event-button-container\">\n                    <Button disabled={isEventOwnerContext} \n                            onClick={() => this.props.handleSubmit(this.props.event.id, this.state.name, this.state.desc, this.state.XP, this.state.date, this.state.type)} className=\"rsvp-button\" variant=\"outline-success\">Save</Button>\n                    <Button disabled={isEventOwnerContext} \n                            onClick={() => this.props.handleDelete(this.props.event.id)} className=\"rsvp-button\" variant=\"outline-danger\">Delete</Button>\n                </div>\n            </Form>\n        )\n    }\n}","import React from 'react';\nimport {Button, Card, Modal} from 'react-bootstrap';\n\nimport EventTypeBadge from '../Event Type Badge/EventTypeBadge';\nimport EventXPBadge from '../Event XP Badge/EventXPBadge';\nimport EventEditForm from '../Event Edit Form/EventEditForm';\n\nimport './EventCard.css';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class EventCard extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    \n        this.state = {\n          show: false,\n          username: ''\n        };\n\n        this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid())\n        .then(snapshot => {\n            this.setState({username: snapshot['first_name'] + ' ' + snapshot['last_name']});\n        });\n      }\n\n    handleClose = () => {\n        this.setState({ show: false });\n    }\n\n    handleShow = () => {\n        this.setState({ show: true });\n    }\n\n    handleClick = async () => {\n    }\n\n    handleSubmit = async (id, name, desc, XP, date, type) => {\n        await this.props.firebase.event.update_event(id, name, desc, XP, date, type);\n        await this.handleClose();\n        document.location.reload(true);\n    }\n\n    handleDelete = async (id) => {\n        await this.props.firebase.event.delete_event(id);\n        await this.handleClose();\n        document.location.reload(true);\n    }\n\n      handleRSVP = () => {\n        //   this.props.firebase.event.rsvp_to_event(this.props.event.id, this.state.username);\n        //   this.handleClose();\n        //   this.props.event.data.rsvp_list.forEach(member => {\n        //     //   let names = member.split(\" \");\n        //     //   let id = null;\n        //     //   this.props.firebase.user.get_user_from_name(names[0], names[1]).then(snapshot => id = snapshot);\n        //   })\n      }\n      \n      render() {\n        const modalTitle = this.props.isRSVP ? 'Event Description' : 'Edit Event'\n        const modalBody = this.props.isRSVP ? this.props.event.data.desc :\n            <EventEditForm handleSubmit={this.handleSubmit.bind(this)} handleDelete={this.handleDelete.bind(this)} event={this.props.event} firebase={this.props.firebase}/>;\n        const eventLinks = this.props.event.data.links && this.props.event.data.links.length > 0 ?\n            <Button variant=\"outline-info\" href={this.props.event.data.links[0]}>Files</Button> :\n            null;\n        return (\n                <div>\n                    <Card>\n                        <Card.Body onClick={this.handleShow}>\n                            <span><strong>{this.props.event.data.name}</strong></span>\n                            <span className=\"event-type\"><EventTypeBadge type={this.props.event.data.type}/></span>\n                            <span className=\"event-type\"><EventXPBadge XP={this.props.event.data.XP}/></span>\n                        </Card.Body>\n                    </Card>\n                    <Modal show={this.state.show} onHide={this.handleClose}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>{modalTitle}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            {modalBody}\n                            <br />\n                            {eventLinks}\n                        </Modal.Body>\n                        {this.props.isRSVP &&\n                            <Modal.Footer>\n                                <Button disabled={this.props.event.data.rsvp_list.includes(this.state.username)} onClick={this.handleRSVP} className=\"rsvp-button\" variant=\"outline-success\">RSVP</Button>\n                            </Modal.Footer>\n                        }\n                    </Modal>\n                </div>\n          )\n      }\n}","import React from 'react'; \nimport EventCard from './Event Card/EventCard';\nimport Spinner from 'react-bootstrap/Spinner'\n\nimport './EventList.css';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class EventList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            events: []\n        }\n\n        // Pull the list of events from Firebase.\n        this.props.firebase.event.get_events().then(snapshot => {\n            let events = this.state.events;\n            let yesterdaysDate = new Date();\n            yesterdaysDate.setDate(yesterdaysDate.getDate() - 2);\n            snapshot.forEach(doc => {\n                if(new Date(doc.data()['date']) >= yesterdaysDate) {\n                    events.push({id: doc.id, data: doc.data()});\n                }\n            });\n            events.sort((a, b) => {\n                return new Date(a.data.date) - new Date(b.data.date);\n            });\n            this.setState({events: events, isLoading: false});\n        }).catch(err => {\n            console.log('Error getting documents', err);\n        });\n    }\n\n    render() {\n        const eventItems = this.state.events.map(event => <EventCard key={event.data.name} event={event} isRSVP={this.props.isRSVP} firebase={this.props.firebase}/>);\n        return (\n            this.state.isLoading ? <Spinner animation=\"border\" size=\"xlg\" /> :\n            <div>\n                {eventItems}\n            </div>\n        )\n    }\n}","import React from 'react'; \nimport {Table} from 'react-bootstrap';\nimport firebase from 'firebase';\nimport './XPAcquisitonHistoryTable.css';\n\nexport default class XPAcquisitonHistoryTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            xpHistory: []\n        }\n    }\n\n    componentDidMount() {\n        this.retrieveUserXPHistory();\n    }\n\n    retrieveUserXPHistory = async () => {\n        await firebase.auth().onAuthStateChanged((user) => {\n            this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid()).then(res => {\n                let xpHistory = res['xp_history'];\n                xpHistory.forEach(async item => {\n                    let eventId = item.id;\n                    // let eventXP = item.xp;\n                    await this.props.firebase.event.get_event(eventId).then(snapshot => {\n                        let newXPHistory = this.state.xpHistory;\n                        let eventData = snapshot.data();\n                        newXPHistory.push({\n                            name: eventData.name,\n                            date: eventData.date,\n                            hostName: eventData.owner,\n                            xpAcquired: eventData.XP\n                        });\n                    })\n                })\n            });\n        });\n    }\n\n    render() {\n        let events = this.state.xpHistory.map(event =>\n            <tr>\n                <td>{event.name}</td>\n                <td>{event.date}</td>\n                <td>{event.hostName}</td>\n                <td>{event.xpAcquired}</td>\n            </tr>\n        );\n\n        return (\n            <Table striped bordered hover className=\"xp-table\">\n                <thead>\n                    <tr>\n                    <th>Event</th>\n                    <th>Date</th>\n                    <th>Host Name</th>\n                    <th>XP Acquired</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Kickoff</td>\n                        <td>08-28-19</td>\n                        <td>Neeraj</td>\n                        <td>80</td>\n                    </tr>\n                    {events}\n                </tbody>\n            </Table>\n        )\n    }\n}\n","import React from 'react'; \nimport {Card, Badge} from 'react-bootstrap';\nimport {} from 'recharts';\n// import XPGrowthChart from './XPGrowthChart';\nimport XPAcquisitionHistoryTable from './XP Acquisition Table/XPAcquisitionHistoryTable';\nimport './XPCard.css';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class XPCard extends React.Component {\n    render() {\n        return (\n            <div>\n                <Card>\n                    <Card.Body>\n                        <Card.Text>\n                            <h1><Badge className=\"xp-badge\">XP: {this.props.XP}</Badge></h1>\n                        </Card.Text>\n                        {/* <XPGrowthChart /> */}\n                        <XPAcquisitionHistoryTable firebase={this.props.firebase}/>\n                    </Card.Body>\n                </Card>\n            </div>\n        )\n    }\n}","import React from 'react'; \nimport {Button, Row, Col} from \"react-bootstrap\"; \nimport UserWelcomeHeader from '../../Member Dashboard/User Welcome Header/UserWelcomeHeader';\nimport EventList from '../../Member Dashboard/Event List/EventList';\nimport XPCard from '../../Member Dashboard/XP Card/XPCard';\n\nimport './DashboardHomePage.css';\n\n/**\n * @author Vidhur Kumar\n */\nexport default class DashboardHomePage extends React.Component {\n\n    render() {\n        return (\n            <div className=\"home-page\">\n                <Row>\n                    <Col><UserWelcomeHeader user={this.props.user}/></Col>\n                </Row>\n                <Row>\n                    <Col xs=\"12\" md=\"6\"><XPCard XP={this.props.user.XP} firebase={this.props.firebase}></XPCard></Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <h2>Upcoming Events</h2>\n                        <span className=\"event-header\">\n                            <Button href=\"https://forms.gle/8fzb6fr8D9d8K4Cv7\" variant=\"outline-primary\">Event Excuse Form</Button>\n                            <Button href=\"https://forms.gle/XgxDPPEKxA2hGTxS6\" variant=\"outline-primary\">Bonus XP</Button>\n                        </span>\n                        <EventList firebase={this.props.firebase} isRSVP={true}/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"event-forms\">\n\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}","import React from 'react'; \nimport {withRouter} from \"react-router-dom\"\nimport {AuthUserContext, withAuthentication} from \"../Session\"; \nimport DashboardNavbar from './Member Dashboard/Dashboard Navbar/DashboardNavbar';\nimport DashboardHomePage from './Common/Home Page/DashboardHomePage';\nimport { FirebaseContext } from '../Firebase';\nimport {MembershipStatus} from \"../Firebase/entity\"; \n\nimport { Button, Form, Container, Row, Col } from \"react-bootstrap\";\nimport Spinner from 'react-bootstrap/Spinner'\nimport * as ROUTES from '../../config/routes'\nimport * as CONSTANTS from \"../../config/config\"\n\n/**\n * This file should be the center point for dashboard building. In order to keep file sizes manageable, the \n * actions themselves are in [[actions.js]] in this folder; those could probably be \n * split up eventually because we will have a lot of actions. \n * @author Raj Shrimali and Vidhur Kumar\n */\nclass Dashboard extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isLoading: true,\n            user: {},\n            current_tab: 'home',\n        }\n    }\n\n    componentDidUpdate() {\n        if(this.cached_user_id !== this.context.uid) {\n            this.getCurrentUser();\n        }\n    }\n\n    async getCurrentUser() {\n        await this.props.firebase.user.get_user(this.context.uid).then((user) => {\n                this.setState({user: user, isLoading: false});\n            });\n    }\n\n    handleClick = (event) => {\n        this.setState({current_tab: event.target.name});\n    }\n\n    render() {\n        return (\n            this.state.isLoading ?   <Spinner animation=\"border\" size=\"xlg\" /> :\n            <FirebaseContext.Consumer>\n                {firebase => {\n                    if (this.state.user.membership_status === MembershipStatus.pending && this.state.user.verification_uri === \"\") {\n                        return (<div><UnverifiedComponent user={this.state.user} firebase={firebase} /></div>)\n                    } else if (this.state.user.membership_status === MembershipStatus.pending) {\n                        return (\n                            <Container>\n                                <h2>We're working on confirming your membership status, and we appreciate your patience. Please give us 1-2 days to confirm.</h2>\n                            </Container>\n                        )\n                    } else {\n                    return (\n                            <div>\n                                <DashboardNavbar click={this.handleClick} firebase={firebase}/>\n                                <DashboardHomePage user={this.state.user} firebase={firebase}/>\n                            </div>\n                            )\n                        }}\n                    }\n            </FirebaseContext.Consumer>\n        )\n    }\n}\nclass UnverifiedComponent extends React.Component {\n    constructor(props) {\n        super(props); \n        this.state = {\n            verification: \"\", \n            verification_method: \"venmo\", \n            vs_amount: 0, \n            vs_person: \"\"\n\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleFileChange = this.handleFileChange.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this); \n\n    }\n    getVerificationStub(method) {\n        if (method === \"venmo\") {\n            return (\n                <Form.Group> \n                <Form.Label> Verification Picture</Form.Label>\n                <Form.Control onChange={this.handleFileChange} name=\"verification\" type=\"file\" accept=\"image/png, image/jpg, image/jpeg\" />\n                </Form.Group>\n            )\n        } else if (method === \"cash\") {\n            return (\n                <Form.Group>\n                    <Form.Label>Amount</Form.Label>\n                    <Form.Control name=\"vs_amount\" onChange={this.handleInputChange} type=\"number\"></Form.Control>\n                    <Form.Label>Person you Paid To</Form.Label>\n                    <Form.Control name=\"vs_person\" onChange={this.handleInputChange} type=\"text\"></Form.Control>\n                </Form.Group> \n            )\n        }\n    }\n    handleInputChange(event) {\n        const target = event.target; \n        const value = target.type === \"checkbox\" ? target.checked : target.value; \n        const name = target.name; \n        this.setState({\n            [name]: value\n        }); \n    }\n    handleFileChange(event) {\n        const target = event.target; \n        const file = target.files[0]; \n     \n        this.setState({\n            \"verification\": file\n        }); \n    }\n\n    async handleSubmit(event) {\n        // try creating an account \n        event.preventDefault(); \n        try {\n            if (this.state.verification_method === \"cash\") {\n                console.log(\"Updating Cash\")\n                await this.props.firebase.user.updateUserVerificationCash(this.state.vs_amount, this.state.vs_person); \n            } else if (this.state.verification_method === \"venmo\") {\n                await this.props.firebase.user.updateUserVerificationVenmo(this.state.verification, this.state.verification.name); \n            }\n        } catch(err) {\n            alert(err); \n            this.props.history.push(ROUTES.LOGIN); \n        } \n    }\n\n    render() {\n        return (\n        <Container> \n            <Row> \n                <Col sm={6}>\n                    <h3>Joining with Venmo</h3> \n                    <ol> \n                        <li> Venmo ${CONSTANTS.DUES_SEMESTER} for a semester membership, \n                        or ${CONSTANTS.DUES_YEAR} for a year membership, to @datascience-gt </li>\n                        <li> Take a screenshot of your payment </li>\n                        <li> Click the signup button, fill out the form, select \"Venmo\", and attach your screenshot</li>\n                        <li> Hit \"Submit\", and you're all done! We'll verify your payment and send you an invite \n                            to the slack within a few days. Welcome to the team! \n                        </li>\n                    </ol>\n                </Col>\n                <Col sm={6}>\n                    <h3> Joining with Cash </h3> \n                    Don't have a Venmo? Refuse to use online payments to stick it to our corporate overlords? \n                    No problem. \n                    <ol>\n                        <li> Pay in cash to any member of the DSGT Team </li>\n                        <li> Get their name when you pay them! </li>\n                        <li> Go to the signup form, fill it out, select \"Cash\" and put in the amount you paid along with \n                            the name of the person you gave cash to. \n                            It's ${CONSTANTS.DUES_SEMESTER} for a semester, or ${CONSTANTS.DUES_YEAR} for a year. \n                        </li>\n                        <li> Hit submit and you're done! It might take us a few days to verify your payment, but \n                            once we do we'll send you a invite to our Slack channel and hook you up with the getting \n                            started material. Glad to have you on the team! \n                        </li>\n                    </ol>\n                </Col>\n            </Row>  \n            <Form onSubmit={this.handleSubmit}> \n            \n                <Form.Group>\n                <Form.Label> Select preferred payment method </Form.Label>\n                <div>\n                    <Form.Check inline onChange={this.handleInputChange} type=\"radio\" name=\"verification_method\" value=\"venmo\" checked={this.state.verification_method === \"venmo\"} label=\"Venmo\" />\n                    <Form.Check inline onChange={this.handleInputChange} type=\"radio\" name=\"verification_method\" value=\"cash\" checked={this.state.verification_method === \"cash\"} label=\"Cash\" /> \n                    <Form.Check inline onChange={this.handleInputChange} type=\"radio\" name=\"verification_method\" value=\"defer\" checked={this.state.verification_method === \"defer\"} label=\"Defer\" />  \n                </div>\n                </Form.Group>\n                {this.getVerificationStub(this.state.verification_method)}\n                {/* <Form.Group>\n                    <Form.Text>More About You</Form.Text>\n                </Form.Group> */}\n\n                <Button variant=\"primary\" type=\"submit\"> \n                    Sign Up \n                </Button>\n            </Form> \n        </Container>\n        )\n    }\n}\n// class Dashboard extends React.Component {\n//     constructor(props) {\n//         super(props); \n//         this.state = {\n//             \"current_render\":  LoadingComponent, \n//             \"actions\": [], \n//             \"user\": {}, \n//             \"reverseMap\": {}\n//         }\n//         this.getDashboard = this.getDashboard.bind(this);\n//         this.getUnverifiedStub = this.getUnverifiedStub.bind(this);  \n//         this.selectAction = this.selectAction.bind(this);\n//         this.cached_user_id = null;\n//         this.first_render_only = true; \n//     }\n//     componentDidUpdate() {\n//         if (this.context === null) {\n//             console.log(this.context, this);\n//         } else {\n           \n//             if (this.cached_user_id !== this.context.uid) {\n//                 this.props.firebase.user.get_user(this.context.uid).then((user) => {\n//                     if (this.first_render_only) {\n//                         this.setState({current_render: UserWelcomeHeader});\n//                         this.first_render_only = false; \n//                     }\n//                     let newActions = actionMapping.default;\n//                     let newReverseMap = {};\n//                     user.groups.forEach(group => {\n//                         if(actionMapping[group]) {\n//                             newActions = newActions.concat(actionMapping[group]);\n//                         }\n//                     })\n//                     newActions.forEach(action => {\n//                         newReverseMap[action.descriptor] = action;\n//                     })\n//                     this.setState({\"actions\": newActions, \"reverseMap\":  newReverseMap, \"user\": user}); \n//                     this.cached_user_id = this.context.uid;\n//                 }); \n//             }\n//         }\n//     }\n//     selectAction(event) {\n//         event.preventDefault(); \n//         this.setState({\"current_render\": this.state.reverseMap[event.target.name]})\n//     }\n//     getDashboard() {\n//         return (\n//             <Row>\n//                 <Col key={UserWelcomeHeader} sm={12} lg={3}>\n//                 <Col key={ViewProfile}></Col>\n//                     {/* <Container>\n//                         <Row key={UserWelcomeCard}></Row>\n//                     </Container> */}\n//                     {/* <Container>\n//                         <Row>\n//                             <h3>Actions</h3>\n//                         </Row>\n//                         {this.state.actions.map(action => {return (\n//                             <Row key={action}>\n//                                 <Button name={action.descriptor} onClick={this.selectAction}>{action.descriptor}</Button>\n//                             </Row>\n//                         )})}\n//                     </Container> */}\n//                 </Col>\n//                 <Col>\n//                     <Row> \n//                         <h3>{this.state.current_render.descriptor}</h3>\n//                     </Row>\n//                     <Row>\n//                         {React.createElement(this.state.current_render, {authUser: this.context, firebase: this.props.firebase, user: this.state.user})}\n//                     </Row>\n//                 </Col>\n//             </Row>\n//             // <div>\n//             // <CreateGroupAction firebase={this.props.firebase} authUser={this.authUser}/> \n//             // <br/>\n//             // <DeleteGroupAction firebase={this.props.firebase} authUser={this.authUser}/>\n//             // <br/>\n//             // <CreateJoinRequestAction firebase={this.props.firebase} authUser={this.authUser}/>\n//             // <TakeRequestAction firebase={this.props.firebase} authUser={this.authUser}/>\n//             // <VerifyPendingUserAction firebase={this.props.firebase} authUser={this.authUser}></VerifyPendingUserAction>\n//             // </div>\n//         )\n//     }\n\n//     getUnverifiedStub(membership_status) {\n//         if (membership_status === entity.MembershipStatus.pending) {\n//             return \"Your membership confirmation is pending. We'll verify it within a few days. Apologies for the delay!\"; \n//         }\n//         if (membership_status === entity.MembershipStatus.suspended) {\n//             return (<p> Your account has been suspended. Please contact support at <a href=\"mailto:datascience.gt@gmail.com\">datascience.gt@gmail.com</a> for assistance.</p>)\n//         }\n//     }\n//     render() {\n//         return (\n//             <Container> \n//                 {this.state.user.membership_status === entity.MembershipStatus.pending || \n//                     this.state.user.membership_status === entity.MembershipStatus.suspended ? this.getUnverifiedStub(this.state.user.membership_status) : this.getDashboard()}\n//             </Container>\n//         )\n//     }\n// }\n\nDashboard.contextType = AuthUserContext;\nconst DashboardWithFirebase = withRouter(withAuthentication(Dashboard));\n\nexport default class DashboardPage extends React.Component{\n    render() {\n        return (\n            <DashboardWithFirebase />\n        )\n    }\n}\n\n","import React from 'react'; \nimport { Button, Form, InputGroup, Container, Modal } from \"react-bootstrap\"; \nimport Spinner from 'react-bootstrap/Spinner'\nimport {withRouter} from 'react-router-dom'; \nimport DashboardNavbar from '../../Member Dashboard/Dashboard Navbar/DashboardNavbar';\nimport { withAuthentication } from '../../../Session';\nimport { FirebaseContext } from '../../../Firebase';\nimport EventList from '../../Member Dashboard/Event List/EventList';\n\n/**\n * The dashboard's event page for event creation, deletion, and modification.\n * @author Vidhur Kumar\n */\nexport class CreateEventForm extends React.Component {\n    \n    /**\n     * \n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            name: \"\",\n            desc: \"\",\n            date: \"\",\n            type: \"General Meeting\",\n            XP: 0,\n            link: \"\",\n        }\n    }\n\n    componentDidMount() {\n        // this.viewEvents();\n    }\n\n    viewEvents = async () => {\n        // await this.props.firebase.event.get_events().then(snapshot => {\n        //     snapshot.docs.forEach(async doc => {\n        //         // let eventId = doc.id;\n        //         // let data = doc.data();\n                \n        //         // console.log(data);\n        //         // if(new Date(data['date']) < new Date() && !data.xpAdded) {\n        //         // //     this.props.firebase.event.mark_event_xpAdded(eventId);\n        //         // }\n        //         // console.log(doc.data()['rsvp_list']);\n        //         // if(doc.data()['rsvp_list'].length > 0) {\n        //         //     let curr = doc.data()['rsvp_list'][0];\n        //         //     this.props.firebase.user.get_user_from_name(curr.split(\" \")[0], curr.split(\" \")[1]).then(res => console.log(res));\n        //         // }\n        //         // console.log(doc.data()['date']);\n        //         // console.log(new Date(doc.data()['date']) < new Date());\n        //     })\n        // })\n        this.setState({isLoading: false});\n    }\n\n    /**\n     * \n     */\n    handleInputChange = async (event) => {\n        await this.setState({[event.target.name]: event.target.value});\n    }\n\n    /**\n     * \n     */\n    handleSubmit = async (event) => {\n        event.preventDefault(); \n        // console.log(this.props.firebase.event);\n        let name = '';\n        await this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid())\n        .then(snapshot => {\n            name = snapshot['first_name'] + ' ' + snapshot['last_name'];\n        })\n        await this.props.firebase.event.create_event(this.state.name, this.state.desc, this.state.XP, this.state.date, this.state.type, name, this.state.link);\n        console.log(this.state);\n        this.setState({name: '', desc: '', date: '', type: '', link: ''});\n        document.location.reload(true);\n    }\n\n    /**\n     * \n     */\n    render() {\n        return (\n            this.state.isLoading ? <Spinner animation=\"border\" size=\"xlg\" /> :\n            <div>\n                <h2><strong>Create Event</strong></h2>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Event Name</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"name\" value={this.state.name}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Event Description</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"desc\" value={this.state.desc}></Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label>Event Type</Form.Label>\n                        <Form.Control as=\"select\" name=\"type\" onChange={this.handleInputChange}>\n                            <option>General Meeting</option>\n                            <option>Workshop</option>\n                            <option>Project</option>\n                            <option>Special</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>XP Points</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"XP\" type=\"number\" value={this.state.XP}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Event Date</Form.Label>\n                        <Form.Control onChange={this.handleInputChange} name=\"date\" type=\"date\" value={this.state.date}></Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>Event Files Link</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control onChange={this.handleInputChange} type=\"url\" name=\"link\" value={this.state.link}/>\n                        </InputGroup>\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">Create</Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\n/**\n * @author Vidhur Kumar\n */\nexport class EditEventForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: [],\n            selectedEventId: \"\",\n            show: false,\n        }\n\n        // Pull the list of events from Firebase.\n        this.populateEvents();\n    }\n\n    async populateEvents() {\n        await this.props.firebase.event.get_events()\n            .then(snapshot => {\n                let events = this.state.events;\n                snapshot.forEach(doc => {\n                    events.push({id: doc.id, data: doc.data()});\n                });\n                this.setState({events: events});\n            }).catch(err => {\n                console.log('Error getting documents', err);\n            });\n    }\n\n    componentDidMount() {\n        setTimeout(1000, () => this.setState({selectedEventId: this.state.events[0]}));\n    }\n\n    \n    /**\n     * Returns the event from the events array with the specified event name.\n     */\n    getEventId = (eventName) => {\n        for(let i in this.state.events) {\n            let currrentEvent = this.state.events[i];\n            if(currrentEvent.data.name ===  eventName) {\n                return currrentEvent.id;\n            }\n        }\n\n        return null;\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\"selectedEventId\": this.getEventId(event.target.value)}); \n        // console.log(this.state);\n    }\n\n    handleClose = () => {\n        this.setState({ show: false });\n    }\n\n    handleShow = () => {\n        this.setState({ show: true });\n    }\n\n    render() {\n        // const eventItems = this.state.events.map(event => <option key={event.id}>{event.data.name}</option>);\n        return (\n            <div>\n                <h2><strong>Edit Event</strong></h2>\n                <EventList firebase={this.props.firebase}/>\n            </div>\n        )\n    }\n}\n\nexport class DashboardEventModal extends React.Component {\n    render() {\n        return (\n            <Modal show={this.props.show} onHide={this.handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Event Description:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body></Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={this.props.handleClick} className=\"rsvp-button\" variant=\"outline-success\">RSVP</Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\n/**\n * @author Vidhur Kumar\n */\nexport class DashboardEventContainer extends React.Component {\n\n    render() {\n        return (\n            <Container>\n                <CreateEventForm firebase={this.props.firebase}/>\n                <EditEventForm firebase={this.props.firebase}/> \n            </Container>\n        )\n    }\n}\n\nconst DashboardEventPageWithFirebase = withRouter(withAuthentication(DashboardEventContainer));\n\nexport default class DashboardEventPage extends React.Component {\n    render() {\n        return (\n            <FirebaseContext.Consumer>\n            {firebase => {\n                return (\n                    <div>\n                        <DashboardNavbar firebase={firebase}/>\n                        <DashboardEventPageWithFirebase />\n                    </div>\n                )\n\n            }}\n            </FirebaseContext.Consumer>\n        )\n    }\n}","import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport Alert from 'react-bootstrap/Alert'\n\nexport default class DashboardAlert extends React.Component {\n    render() {\n        return (\n            <Alert show={this.props.show} variant=\"success\">\n                <Alert.Heading>{this.props.heading}</Alert.Heading>\n                {/* <p>\n                Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget\n                lacinia odio sem nec elit. Cras mattis consectetur purus sit amet\n                fermentum.\n                </p> */}\n                <hr />\n                <div className=\"d-flex justify-content-end\">\n                    <Button onClick={this.props.close} variant=\"outline-success\">Confirm Changes</Button>\n                </div>\n            </Alert>\n        )\n    }\n}","import React from 'react'; \nimport { Button, Form, Container } from \"react-bootstrap\";\nimport Badge from 'react-bootstrap/Badge';\nimport DashboardAlert from '../../Member Dashboard/Dashboard Alert/DashboardAlert';\nimport {withRouter} from 'react-router-dom'; \nimport DashboardNavbar from '../../Member Dashboard/Dashboard Navbar/DashboardNavbar';\nimport firebase from 'firebase';\nimport { FirebaseContext } from '../../../Firebase';\nimport { AuthUserContext, withAuthentication } from '../../../Session';\n\n/**\n * The dashboard's edit profile page. Used to change any personal information, upload resumes, etc.\n * @author Vidhur Kumar\n */\nexport class DashboardEditProfileContainer extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            userData: {},\n            gt_email: '',\n            first_name: '',\n            last_name: '',\n            alt_email: '',\n            major: '',\n            year: '',\n            phone_number: '',\n            resume: null,\n            resume_uri: '',\n            showAlert: false\n        }\n    }\n\n    componentDidMount() {\n        this.populate_events();\n\n        // this.props.firebase.event.get_events().then(snapshot => {\n        //     snapshot.docs.forEach(doc => {\n        //         console.log(doc.data());\n        //     })\n        // })\n    }\n\n    async populate_events() {\n        await firebase.auth().onAuthStateChanged((user) => {\n            this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid()).then(snapshot => {\n                this.setState({\n                    userData: snapshot,\n                    gt_email: snapshot['gt_email'], \n                    first_name: snapshot['first_name'],\n                    last_name: snapshot['last_name'],\n                    alt_email: snapshot['alt_email'],\n                    major: snapshot['major'],\n                    year: snapshot['year'],\n                    phone_number: snapshot['phone_number'],\n                    resume_uri: snapshot['resume_uri']\n                });\n        });\n        })\n    }\n\n    handleInputChange = async (event) => {\n        await this.setState({[event.target.name]: event.target.value});\n        this.props.firebase.user.get_user(this.props.firebase.user.get_current_uid()).then(res => console.log(res));\n    }\n\n    handleFileInputChange = async (event) => {\n        const target = event.target; \n        const file = target.files[0]; \n        // console.log(file);\n        this.setState({\n            resume: file\n        });\n    }\n\n    handleAlertClose = async () => {\n        console.log('here');\n        await this.setState({\n            showAlert: false\n        });\n        document.location.reload(true);\n    }\n\n    handleSubmit = async () => {\n        await this.props.firebase.user.update_user(this.props.firebase.user.get_current_uid(), this.state.gt_email, this.state.first_name, this.state.last_name,\n                this.state.alt_email, this.state.major, this.state.year, this.state.phone_number);\n        if(this.state.resume != null) {\n            await this.props.firebase.user.update_user_resume(this.props.firebase.user.get_current_uid(), this.state.resume);\n            await this.setState({\n                showAlert: true\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <DashboardAlert heading=\"Successfully uploaded resume!\" show={this.state.showAlert} close={this.handleAlertClose}/>\n                <Container>\n                    <Form>\n                        <Form.Group controlId=\"formBasicEmail\"> \n                            <Form.Label>GT Email Address</Form.Label> \n                            <Form.Control onChange={this.handleInputChange} name=\"gt_email\" type=\"email\" value={this.state.gt_email} /> \n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>First Name</Form.Label>\n                            <Form.Control onChange={this.handleInputChange} name=\"first_name\" type=\"text\" defaultValue={this.state.userData.first_name} />\n                        </Form.Group>\n\n                        <Form.Group> \n                            <Form.Label>Last Name</Form.Label> \n                            <Form.Control onChange={this.handleInputChange} name=\"last_name\" type=\"text\" defaultValue={this.state.userData.last_name}/> \n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Alternate Email Address (i.e. gmail)</Form.Label>\n                            <Form.Control onChange={this.handleInputChange} name=\"alt_email\" type=\"email\" defaultValue={this.state.userData.alt_email} /> \n                        </Form.Group>\n\n                        <Form.Group> \n                            <Form.Label>Major</Form.Label> \n                            <Form.Control onChange={this.handleInputChange} name=\"major\" type=\"text\" defaultValue={this.state.userData.major} /> \n                        </Form.Group>\n\n                        <Form.Group controlId=\"\">\n                            <Form.Label>Year</Form.Label>\n                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"year\" type=\"text\">\n                                <option selected={this.state.userData.year === 'Freshman'}>Freshman</option>\n                                <option selected={this.state.userData.year === 'Sophomore'}>Sophomore</option>\n                                <option selected={this.state.userData.year === 'Junior'}>Junior</option>\n                                <option selected={this.state.userData.year === 'Senior'}>Senior</option>\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label> Phone Number </Form.Label>\n                            <Form.Control onChange={this.handleInputChange} name=\"phone_number\" type=\"tel\" defaultValue={this.state.userData.phone_number} /> \n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Upload Resume (PDF only)</Form.Label>\n                            {this.state.resume_uri && \n                                <Badge variant=\"secondary\">{this.state.resume_uri.split('/').slice(-1)[0]}</Badge>\n                            }\n                            <Form.Control onChange={this.handleFileInputChange} name=\"resume\" type=\"file\" accept=\".pdf\" />\n                        </Form.Group>\n\n                        {/* TODO: REMOVE THIS AND MOVE TO SECONDARY STAGE!!! \n                            This is where the user can select which payment method they prefer. \n                        */}\n\n                        {/* <Form.Group>\n                            <Form.Text>More About You</Form.Text>\n                        </Form.Group> */}\n\n                        <Button onClick={this.handleSubmit} variant=\"primary\" type=\"button\"> \n                            Submit changes\n                        </Button>\n\n                    </Form>    \n                </Container>   \n            </div>\n        )\n    }\n}\n\nDashboardEditProfileContainer.contextType = AuthUserContext;\nconst DashboardEditProfilePageWithFirebase = withRouter(withAuthentication(DashboardEditProfileContainer));\n\nexport default class DashboardEditProfilePage extends React.Component {\n    render() {\n        return (\n            <FirebaseContext.Consumer>\n            {firebase => {\n                return (\n                    <div>\n                        <DashboardNavbar firebase={firebase}/>\n                        <DashboardEditProfilePageWithFirebase />\n                    </div>\n                )\n\n            }}\n            </FirebaseContext.Consumer>\n        )\n    }\n}","import React from 'react';\nimport {Button, Form, Table, Container, ListGroup } from \"react-bootstrap\"; \nimport { AuthUserContext, withAuthentication } from '../../../Session';\nimport {withRouter} from 'react-router-dom'; \nimport { FirebaseContext } from '../../../Firebase';\nimport DashboardNavbar from '../../Member Dashboard/Dashboard Navbar/DashboardNavbar';\n\n/**\n * @author Vidhur Kumar\n * @since 224\n */\n\n/**\n * Action to create a group. This internally uses the \n * [[../Firebase/groups]] API to create a group. Upon creation of a group, \n * two things happen: \n * 1. The group is added to the `/usergroups/` collection as a document. The \n * group document looks like: \n * ```json \n * { \n *  \"name\": \"group_name\", \n *  \"members\": [], \n *  \"join_requests\": []\n * }\n * ``` \n * `members` is really a firebase collection. Each document in the members \n * collection is an empty document with the same UID as the user. \n * the `join_requests` collection appears when there are join requests. \n */\nexport class CreateGroupForm extends React.Component {\n    static descriptor = \"Create New Group\"\n    constructor(props) {\n        super(props); \n        this.state = {\n            name: \"\" \n        }; \n        this.handleInputChange = this.handleInputChange.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this); \n    }\n\n    handleInputChange(event) {\n        this.setState({name: event.target.value}); \n    }\n\n    /**\n     * A simple wrapper that interally just calls create_group with the name. \n     * @param event The triggering JS event \n     */\n    handleSubmit(event) {\n        event.preventDefault(); \n        const name = this.state.name; \n        this.props.firebase.group.create_group(name); \n    }\n    \n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group>\n                    <Form.Label>New Group Name</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} name=\"name\"></Form.Control>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">Create</Button>\n            </Form>\n        )\n    }\n}\n\n/**\n * Similar to above, but performs a recursive delete on a group. \n * Again, internally just calls delete_group. \n */\nexport class DeleteGroupForm extends React.Component {\n    static descriptor = \"Delete Group\"\n    constructor(props) {\n        super(props); \n        this.state = {\n            groups_available: [],\n            name: \"\"\n        }\n        this.handleInputChange = this.handleInputChange.bind(this); \n        this.handleSubmit = this.handleSubmit.bind(this); \n        this.setup_groups_available();\n    }\n    async setup_groups_available() {\n        this.props.firebase.group.get_groups().then(available_groups => {\n            this.setState({'groups_available': available_groups})\n        })\n\n    }\n    handleInputChange(event){\n        this.setState({name: event.target.value}); \n    }\n\n    handleSubmit(event) {\n        event.preventDefault(); \n        const name = this.state.name; \n        this.props.firebase.group.delete_group(name); \n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <p>Available Groups: </p>\n                <ListGroup>{this.state.groups_available.map((group) => { return(\n                    <ListGroup.Item key={group}>{group}</ListGroup.Item>\n                )})}\n                </ListGroup>\n                <Form.Group>\n                    <Form.Label>Delete Group Name</Form.Label>\n                    <Form.Control onChange={this.handleInputChange} name=\"name\"></Form.Control>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">Delete</Button>\n            </Form>\n        )\n    }\n}\n\n/**\n * Similar to the other two; provides a UI wrapper for the \n * `user.requestJoinGroup` function call. Note that this one is in the `user` \n * api instead of the `group` api. \n */\nexport class CreateJoinRequestForm extends React.Component {\n    static descriptor = \"Join a Group\"; \n    constructor(props) {\n        super(props) \n        this.state = {\n            available_groups: [], \n            users: [],\n            // selectedUserIds: new Set(),\n            selectedUserId: '',\n            name: \"\", \n            reason: \"\", \n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this); \n        this.handleSelectedOptionsChange = this.handleSelectedOptionsChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this); \n    }\n\n    componentDidMount() {\n        this.props.firebase.group.get_groups().then(groups => {\n            this.setState({available_groups: groups});\n        });\n        this.populateUsers();\n    }\n\n    /**\n     * \n     */\n    populateUsers = async () => {\n        let users = [];\n        await this.props.firebase.user.get_all_users().then(snapshot => {\n           snapshot.docs.forEach(doc => {\n               users.push({id: doc.id, data: doc.data()});\n           })\n        });\n        await this.setState({users: users});\n    }\n\n    async handleInputChange(event) {\n        let target = event.target; \n        await this.setState({[target.name]: target.value})\n        // console.log(target.selectedOptions[0].getAttribute('data-key'));\n    }\n\n    async handleSelectedOptionsChange(event) {\n        let target = event.target; \n        await this.setState({'selectedUserId': target[target.selectedIndex].getAttribute('data-key')});\n        console.log(this.state.selectedUserId);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault(); \n        // this.props.firebase.user.add_user_to_group(null, null);\n        // this.props.firebase.user.requestJoinGroup(this.state.name, this.state.reason); \n        // this.props.firebase.user.addUserToGroups(this.props.firebase.user.get_user_from_name().then())\n        // this.props.firebase.user.get_user_from_name(this.state.user.split(\" \")[0], this.state.user.split(\" \")[1]).then(id => console.log(id));\n        this.props.firebase.user.addUserToGroup(this.state.selectedUserId, this.state.name);\n    }\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group> \n                    <Form.Label>Select Group</Form.Label>\n                    <Form.Control as=\"select\" onChange={this.handleInputChange} name=\"name\"> \n                        <option>None Selected</option>\n                        {this.state.available_groups.map(group => <option key={group} value={group}>{group}</option>)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Select User</Form.Label>\n                    <Form.Control onChange={this.handleSelectedOptionsChange} name=\"selectedUserId\" as=\"select\">\n                        {this.state.users.map(user => <option key={user.id} data-key={user.id}>{user.data.first_name + \" \" + user.data.last_name}</option>)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Reason</Form.Label>\n                    <Form.Control name=\"reason\" as=\"textarea\" rows='3' onChange={this.handleInputChange}></Form.Control>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">Add To Group</Button>\n            </Form>\n        )\n    }\n}\n\n/**\n * Allows a member of a group to approve or deny the addition of another member. \n * Internally wraps up `user.respondToJoinRequest` and `group.getPendingRequests` \n * into one UI element. \n */\n// export class TakeRequestAction extends DashboardAction {\n//     static descriptor = \"View Join Requests\";\n//     constructor(props) {\n//         super(props) \n//         this.state = {\n//             \"available_groups\": [],\n//             \"selected\": \"\", \n//             \"requests\": []\n//         }; \n//         console.log(this.props.firebase.user);\n//         this.reqs = [] \n//         this.handleInputChange = this.handleInputChange.bind(this); \n//         this.handleSubmit = this.handleSubmit.bind(this); \n//         this.handleClick = this.handleClick.bind(this); \n\n       \n//     }\n\n//     componentDidMount() {\n//          /**\n//          * This should be changed so that it only shows the users' groups. \n//          * Should be a simple fix from `this.props.firebase.group.get_groups()` \n//          * to `this.user.groups` (which is an array). This would also \n//          * drastically make the render better as there's one less database \n//          * query to be taken. I would change it now but I'm tired and too \n//          * lazy to test. See issue #78\n//          */\n//         this.setState({\"available_groups\": this.props.firebase.user.groups}); \n//     }\n//     handleInputChange(event) {\n//         let target = event.target; \n//         this.setState({\n//             \"selected\": target.value\n//         }, this.handleUpdateRequests); \n//     }\n\n//     handleUpdateRequests(force) {\n//         this.props.firebase.group.getPendingRequests(this.state.selected).then(req => {\n//             if (!force) {\n//                 this.setState({\"requests\": req.docs.map(doc => doc.data())}); \n//             } else {\n//                 this.state.requests = req.docs.map(doc => doc.data()); \n//                 this.forceUpdate(); \n//             }\n//         })\n//     }\n\n//     handleSubmit(event) {\n//         event.preventDefault(); \n//     }\n    \n//     handleClick(event) {\n//         this.props.firebase.user.respondToJoinRequest(this.state.selected, event.target.value, \n//             event.target.name === \"approve\" ? 1 : 0); \n//         this.handleUpdateRequests(true); \n//     }\n\n//     render() {\n//         return (\n//             <Container> \n//                 <Form onSubmit={this.handleSubmit}>\n//                     <Form.Group>\n//                         <Form.Label>Select Group for Requests</Form.Label>\n//                         <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"selected_option\">\n//                             <option> None selected </option> \n//                             {this.state.available_groups.map(group => <option key={group} value={group}>{group}</option>)}\n//                         </Form.Control>\n//                     </Form.Group>\n//                 </Form>\n//                 <Table> \n//                     <tbody>\n\n//                     {this.state.requests.map(req => \n//                         <tr key={req.user}>\n//                             <td>{req.first_name}</td>\n//                             <td>{req.last_name}</td>\n//                             <td>{req.reason}</td>\n//                             <td>\n//                                 <Button variant=\"primary\" name=\"approve\" value={req.user} onClick={this.handleClick}>Approve</Button>\n//                                 <Button variant=\"danger\" name=\"deny\" value={req.user} onClick={this.handleClick}>Deny</Button>\n//                             </td>\n//                         </tr>\n//                      )}\n//                     </tbody>\n//                 </Table>\n//             </Container> \n//         )\n//     }\n// }\n\n/**\n * Allows a finance user to confirm whether or not a payment has been made. \n * Essentially a UI wrapper for `user.verifyUserPayment`. \n */\nexport class VerifyPendingUserForm extends React.Component {\n    static descriptor = \"Verify Pending Users\";\n    constructor(props) {\n        super(props); \n        this.state = {\n            \"pending_users\": []\n        }; \n        this.handleStatusChange = this.handleStatusChange.bind(this); \n    }\n    componentDidUpdate() {\n        // get pending users \n        this.update_pending_users_state(); \n    }\n \n    async update_pending_users_state() {\n        // fetch pending users \n        let ret = await this.props.firebase.user.getPendingUsers(); \n        if (ret) {\n            this.update_users(ret); \n        }\n    }\n\n    update_users(snapshot) {\n        this.setState({\"pending_users\": snapshot})\n    \n    }\n    \n    handleStatusChange(event) {\n        let target = event.target; \n        this.props.firebase.user.verifyUserPayment(target.value, target.name, target.is_cash); \n        this.update_pending_users_state(); \n    }\n\n    render_verification_stub(req) {\n        if (req.verification_uri === \"\") {\n            return \"Deferred\"\n        }\n        else if (req.verification_uri.split(\",\")[0] === \"cash\") {\n            return req.verification_uri;\n        } else {\n            return <img alt={req.verification_uri} src={req.verification_uri}></img>\n        }\n    }\n\n    render() { \n        return (\n        <Container> \n            <Table> \n                <tbody>\n\n                {this.state.pending_users.map(req => \n                    <tr key={req.uid}>\n                        <td>{req.first_name}</td>\n                        <td>{req.last_name}</td>\n                        <td>{this.render_verification_stub(req)}</td>\n                        <td>\n                            <Button variant=\"danger\" name=\"0\" value={req.uid} is_cash={(req.verification_uri.split(\",\")[0] === \"cash\").toString()} onClick={this.handleStatusChange}>Suspend</Button>\n                            <Button variant=\"primary\" name=\"1\" value={req.uid} is_cash={(req.verification_uri.split(\",\")[0] === \"cash\").toString()} onClick={this.handleStatusChange}>Paid Semester</Button>\n                            <Button variant=\"primary\" name=\"2\" value={req.uid} is_cash={(req.verification_uri.split(\",\")[0] === \"cash\").toString()} onClick={this.handleStatusChange}>Paid Year</Button>\n                        </td>\n                    </tr>\n                    )}\n                </tbody>\n            </Table>\n\n        </Container>\n    )\n    }\n}\n\nexport class DashboardGroupContainer extends React.Component {\n\n    render() {\n        return (\n            <Container>\n                <CreateGroupForm firebase={this.props.firebase} authUser={this.authUser}/> \n                <DeleteGroupForm firebase={this.props.firebase} authUser={this.authUser}/>\n                <CreateJoinRequestForm firebase={this.props.firebase} authUser={this.authUser}/>\n                <VerifyPendingUserForm firebase={this.props.firebase} authUser={this.authUser}></VerifyPendingUserForm>\n            </Container>\n        )\n    }\n}\n\nDashboardGroupContainer.contextType = AuthUserContext;\nconst DashboardGroupContainerWithFirebase = withRouter(withAuthentication(DashboardGroupContainer));\n\nexport default class DashboardGroupPage extends React.Component {\n    render() {\n        return (\n            <FirebaseContext.Consumer>\n            {firebase => {\n                return (\n                    <div>\n                        <DashboardNavbar firebase={firebase}/>\n                        <DashboardGroupContainerWithFirebase />\n                    </div>\n                )\n\n            }}\n            </FirebaseContext.Consumer>\n        )\n    }\n}","import React from 'react' ;\n\nimport {BrowserRouter as Router, Route} from 'react-router-dom'; \n\nimport Navigation from '../Navigation/Navigation'; \nimport HomePage from \"../Home Page/HomePage\"; \nimport SignUpPage from \"../Signup Page/SignUpPage\";\nimport LoginPage from \"../Login Page/LoginPage\"; \n// import Dashboard from \"../Dashboard/Dashboard\"; \nimport Dashboard from '../Dashboard/Dashboard';\nimport DashboardEventPage from '../Dashboard/Common/Event Page/DashboardEventPage';\nimport DashboardEditProfilePage from '../Dashboard/Common/Edit Profile Page/DashboardEditProfilePage';\nimport * as ROUTES from \"../../config/routes\"\n\nimport { withAuthentication } from \"../Session\"\nimport  DashboardGroupPage from '../Dashboard/Common/Group Page/DashboardGroupPage';\n\n/**\n * @author Raj Shrimali and Vidhur Kumar\n */\nclass App extends React.Component {\n    render () {\n        return (\n            <Router>\n                <Navigation/> \n                <Route exact path={ROUTES.LANDING} component={HomePage} />\n                <Route path={ROUTES.LOGIN} component={LoginPage} />\n                <Route path={ROUTES.SIGNUP} component={SignUpPage} />\n                <Route path={ROUTES.DASHBOARD_HOME} component={Dashboard} />\n                <Route path={ROUTES.DASHBORD_EDIT_PROFILE} component={DashboardEditProfilePage}/>\n                <Route path={ROUTES.DASHBOARD_EVENT} component={DashboardEventPage}/>                \n                <Route path={ROUTES.DASHBOARD_GROUP} component={DashboardGroupPage} />\n            </Router> \n        )\n    }\n\n}\nexport default withAuthentication(App); \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App'\nimport Firebase, { FirebaseContext } from \"./components/Firebase\"; \n\n\nReactDOM.render( \n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>, document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}